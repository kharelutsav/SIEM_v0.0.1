<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="1704"><g><title>leef`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="0.2347%" y="309" width="0.0587%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.4847%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="0.2347%" y="293" width="0.0587%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.4847%" y="303.50"></text></g><g><title>leef`__rdl_dealloc (2 samples, 0.12%)</title><rect x="0.2934%" y="309" width="0.1174%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="2"/><text x="0.5434%" y="319.50"></text></g><g><title>leef`&lt;json::object::Key as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="0.5282%" y="293" width="0.0587%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="1"/><text x="0.7782%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="0.5869%" y="293" width="0.0587%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="1"/><text x="0.8369%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="0.5869%" y="277" width="0.0587%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1"/><text x="0.8369%" y="287.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::object::Node&gt; (5 samples, 0.29%)</title><rect x="0.4108%" y="309" width="0.2934%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="5"/><text x="0.6608%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="0.6455%" y="293" width="0.0587%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="0.8955%" y="303.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.06%)</title><rect x="0.7042%" y="309" width="0.0587%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="1"/><text x="0.9542%" y="319.50"></text></g><g><title>leef`core::slice::memchr::memchr_general_case (10 samples, 0.59%)</title><rect x="0.7629%" y="309" width="0.5869%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="10"/><text x="1.0129%" y="319.50"></text></g><g><title>leef`core::str::pattern::StrSearcher::new (1 samples, 0.06%)</title><rect x="1.3498%" y="309" width="0.0587%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="1"/><text x="1.5998%" y="319.50"></text></g><g><title>leef`dotenv::find::Finder::find (1 samples, 0.06%)</title><rect x="1.4085%" y="293" width="0.0587%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="1"/><text x="1.6585%" y="303.50"></text></g><g><title>leef`std::env::current_dir (1 samples, 0.06%)</title><rect x="1.4085%" y="277" width="0.0587%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="1"/><text x="1.6585%" y="287.50"></text></g><g><title>libsystem_c.dylib`__private_getcwd (1 samples, 0.06%)</title><rect x="1.4085%" y="261" width="0.0587%" height="15" fill="rgb(206,188,39)" fg:x="24" fg:w="1"/><text x="1.6585%" y="271.50"></text></g><g><title>libsystem_c.dylib`__getcwd (1 samples, 0.06%)</title><rect x="1.4085%" y="245" width="0.0587%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="1"/><text x="1.6585%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (1 samples, 0.06%)</title><rect x="1.4085%" y="229" width="0.0587%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="1"/><text x="1.6585%" y="239.50"></text></g><g><title>leef`dotenv::dotenv (2 samples, 0.12%)</title><rect x="1.4085%" y="309" width="0.1174%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="2"/><text x="1.6585%" y="319.50"></text></g><g><title>leef`dotenv::iter::Iter&lt;R&gt;::load (1 samples, 0.06%)</title><rect x="1.4671%" y="293" width="0.0587%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="1"/><text x="1.7171%" y="303.50"></text></g><g><title>leef`std::env::_set_var (1 samples, 0.06%)</title><rect x="1.4671%" y="277" width="0.0587%" height="15" fill="rgb(221,200,47)" fg:x="25" fg:w="1"/><text x="1.7171%" y="287.50"></text></g><g><title>libsystem_c.dylib`setenv (1 samples, 0.06%)</title><rect x="1.4671%" y="261" width="0.0587%" height="15" fill="rgb(226,26,5)" fg:x="25" fg:w="1"/><text x="1.7171%" y="271.50"></text></g><g><title>libsystem_c.dylib`__setenv_locked (1 samples, 0.06%)</title><rect x="1.4671%" y="245" width="0.0587%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="1"/><text x="1.7171%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="1.4671%" y="229" width="0.0587%" height="15" fill="rgb(235,183,28)" fg:x="25" fg:w="1"/><text x="1.7171%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="1.4671%" y="213" width="0.0587%" height="15" fill="rgb(221,5,38)" fg:x="25" fg:w="1"/><text x="1.7171%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.06%)</title><rect x="1.4671%" y="197" width="0.0587%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="1"/><text x="1.7171%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 2.00%)</title><rect x="4.3427%" y="277" width="1.9953%" height="15" fill="rgb(241,131,45)" fg:x="74" fg:w="34"/><text x="4.5927%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 1.76%)</title><rect x="4.5775%" y="261" width="1.7606%" height="15" fill="rgb(249,31,29)" fg:x="78" fg:w="30"/><text x="4.8275%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 1.47%)</title><rect x="4.8709%" y="245" width="1.4671%" height="15" fill="rgb(225,111,53)" fg:x="83" fg:w="25"/><text x="5.1209%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.76%)</title><rect x="5.5751%" y="229" width="0.7629%" height="15" fill="rgb(238,160,17)" fg:x="95" fg:w="13"/><text x="5.8251%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="6.3380%" y="277" width="0.0587%" height="15" fill="rgb(214,148,48)" fg:x="108" fg:w="1"/><text x="6.5880%" y="287.50"></text></g><g><title>leef`&lt;alloc::string::String as core::clone::Clone&gt;::clone (40 samples, 2.35%)</title><rect x="4.1667%" y="293" width="2.3474%" height="15" fill="rgb(232,36,49)" fg:x="71" fg:w="40"/><text x="4.4167%" y="303.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="6.3967%" y="277" width="0.1174%" height="15" fill="rgb(209,103,24)" fg:x="109" fg:w="2"/><text x="6.6467%" y="287.50"></text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="6.5141%" y="293" width="0.0587%" height="15" fill="rgb(229,88,8)" fg:x="111" fg:w="1"/><text x="6.7641%" y="303.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="7.4531%" y="261" width="0.0587%" height="15" fill="rgb(213,181,19)" fg:x="127" fg:w="1"/><text x="7.7031%" y="271.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="7.4531%" y="245" width="0.0587%" height="15" fill="rgb(254,191,54)" fg:x="127" fg:w="1"/><text x="7.7031%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="7.4531%" y="229" width="0.0587%" height="15" fill="rgb(241,83,37)" fg:x="127" fg:w="1"/><text x="7.7031%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="7.4531%" y="213" width="0.0587%" height="15" fill="rgb(233,36,39)" fg:x="127" fg:w="1"/><text x="7.7031%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="7.4531%" y="197" width="0.0587%" height="15" fill="rgb(226,3,54)" fg:x="127" fg:w="1"/><text x="7.7031%" y="207.50"></text></g><g><title>leef`json::object::Object::insert_index (10 samples, 0.59%)</title><rect x="6.9836%" y="277" width="0.5869%" height="15" fill="rgb(245,192,40)" fg:x="119" fg:w="10"/><text x="7.2336%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="7.5117%" y="261" width="0.0587%" height="15" fill="rgb(238,167,29)" fg:x="128" fg:w="1"/><text x="7.7617%" y="271.50"></text></g><g><title>leef`&lt;json::object::Object as core::ops::index::IndexMut&lt;&amp;str&gt;&gt;::index_mut (18 samples, 1.06%)</title><rect x="6.5728%" y="293" width="1.0563%" height="15" fill="rgb(232,182,51)" fg:x="112" fg:w="18"/><text x="6.8228%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.06%)</title><rect x="7.5704%" y="277" width="0.0587%" height="15" fill="rgb(231,60,39)" fg:x="129" fg:w="1"/><text x="7.8204%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.12%)</title><rect x="20.4225%" y="213" width="0.1174%" height="15" fill="rgb(208,69,12)" fg:x="348" fg:w="2"/><text x="20.6725%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="20.4225%" y="197" width="0.1174%" height="15" fill="rgb(235,93,37)" fg:x="348" fg:w="2"/><text x="20.6725%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.12%)</title><rect x="20.4225%" y="181" width="0.1174%" height="15" fill="rgb(213,116,39)" fg:x="348" fg:w="2"/><text x="20.6725%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="20.4812%" y="165" width="0.0587%" height="15" fill="rgb(222,207,29)" fg:x="349" fg:w="1"/><text x="20.7312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="20.4812%" y="149" width="0.0587%" height="15" fill="rgb(206,96,30)" fg:x="349" fg:w="1"/><text x="20.7312%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="20.5399%" y="181" width="0.0587%" height="15" fill="rgb(218,138,4)" fg:x="350" fg:w="1"/><text x="20.7899%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.18%)</title><rect x="20.6573%" y="165" width="0.1761%" height="15" fill="rgb(250,191,14)" fg:x="352" fg:w="3"/><text x="20.9073%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.12%)</title><rect x="20.7160%" y="149" width="0.1174%" height="15" fill="rgb(239,60,40)" fg:x="353" fg:w="2"/><text x="20.9660%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="20.7746%" y="133" width="0.0587%" height="15" fill="rgb(206,27,48)" fg:x="354" fg:w="1"/><text x="21.0246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.06%)</title><rect x="20.9507%" y="149" width="0.0587%" height="15" fill="rgb(225,35,8)" fg:x="357" fg:w="1"/><text x="21.2007%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.23%)</title><rect x="20.8333%" y="165" width="0.2347%" height="15" fill="rgb(250,213,24)" fg:x="355" fg:w="4"/><text x="21.0833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="21.0094%" y="149" width="0.0587%" height="15" fill="rgb(247,123,22)" fg:x="358" fg:w="1"/><text x="21.2594%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.06%)</title><rect x="21.2441%" y="117" width="0.0587%" height="15" fill="rgb(231,138,38)" fg:x="362" fg:w="1"/><text x="21.4941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.35%)</title><rect x="21.0681%" y="149" width="0.3521%" height="15" fill="rgb(231,145,46)" fg:x="359" fg:w="6"/><text x="21.3181%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.23%)</title><rect x="21.1854%" y="133" width="0.2347%" height="15" fill="rgb(251,118,11)" fg:x="361" fg:w="4"/><text x="21.4354%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.12%)</title><rect x="21.3028%" y="117" width="0.1174%" height="15" fill="rgb(217,147,25)" fg:x="363" fg:w="2"/><text x="21.5528%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.47%)</title><rect x="21.0681%" y="165" width="0.4695%" height="15" fill="rgb(247,81,37)" fg:x="359" fg:w="8"/><text x="21.3181%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.12%)</title><rect x="21.4202%" y="149" width="0.1174%" height="15" fill="rgb(209,12,38)" fg:x="365" fg:w="2"/><text x="21.6702%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="21.4789%" y="133" width="0.0587%" height="15" fill="rgb(227,1,9)" fg:x="366" fg:w="1"/><text x="21.7289%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.18%)</title><rect x="21.5376%" y="165" width="0.1761%" height="15" fill="rgb(248,47,43)" fg:x="367" fg:w="3"/><text x="21.7876%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.18%)</title><rect x="21.5376%" y="149" width="0.1761%" height="15" fill="rgb(221,10,30)" fg:x="367" fg:w="3"/><text x="21.7876%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 1.29%)</title><rect x="20.5399%" y="197" width="1.2911%" height="15" fill="rgb(210,229,1)" fg:x="350" fg:w="22"/><text x="20.7899%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (21 samples, 1.23%)</title><rect x="20.5986%" y="181" width="1.2324%" height="15" fill="rgb(222,148,37)" fg:x="351" fg:w="21"/><text x="20.8486%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="21.7136%" y="165" width="0.1174%" height="15" fill="rgb(234,67,33)" fg:x="370" fg:w="2"/><text x="21.9636%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="21.8310%" y="197" width="0.0587%" height="15" fill="rgb(247,98,35)" fg:x="372" fg:w="1"/><text x="22.0810%" y="207.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28 samples, 1.64%)</title><rect x="20.3052%" y="245" width="1.6432%" height="15" fill="rgb(247,138,52)" fg:x="346" fg:w="28"/><text x="20.5552%" y="255.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (26 samples, 1.53%)</title><rect x="20.4225%" y="229" width="1.5258%" height="15" fill="rgb(213,79,30)" fg:x="348" fg:w="26"/><text x="20.6725%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 1.41%)</title><rect x="20.5399%" y="213" width="1.4085%" height="15" fill="rgb(246,177,23)" fg:x="350" fg:w="24"/><text x="20.7899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="21.8897%" y="197" width="0.0587%" height="15" fill="rgb(230,62,27)" fg:x="373" fg:w="1"/><text x="22.1397%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="21.8897%" y="181" width="0.0587%" height="15" fill="rgb(216,154,8)" fg:x="373" fg:w="1"/><text x="22.1397%" y="191.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="21.9484%" y="245" width="0.0587%" height="15" fill="rgb(244,35,45)" fg:x="374" fg:w="1"/><text x="22.1984%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.29%)</title><rect x="22.0070%" y="245" width="0.2934%" height="15" fill="rgb(251,115,12)" fg:x="375" fg:w="5"/><text x="22.2570%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.23%)</title><rect x="22.0657%" y="229" width="0.2347%" height="15" fill="rgb(240,54,50)" fg:x="376" fg:w="4"/><text x="22.3157%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.12%)</title><rect x="22.1831%" y="213" width="0.1174%" height="15" fill="rgb(233,84,52)" fg:x="378" fg:w="2"/><text x="22.4331%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="22.2418%" y="197" width="0.0587%" height="15" fill="rgb(207,117,47)" fg:x="379" fg:w="1"/><text x="22.4918%" y="207.50"></text></g><g><title>leef`json::object::Object::insert_index (131 samples, 7.69%)</title><rect x="14.9061%" y="261" width="7.6878%" height="15" fill="rgb(249,43,39)" fg:x="254" fg:w="131"/><text x="15.1561%" y="271.50">leef`json::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.29%)</title><rect x="22.3005%" y="245" width="0.2934%" height="15" fill="rgb(209,38,44)" fg:x="380" fg:w="5"/><text x="22.5505%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (10 samples, 0.59%)</title><rect x="22.5939%" y="261" width="0.5869%" height="15" fill="rgb(236,212,23)" fg:x="385" fg:w="10"/><text x="22.8439%" y="271.50"></text></g><g><title>leef`&lt;json::object::Object as core::ops::index::IndexMut&lt;&amp;str&gt;&gt;::index_mut (260 samples, 15.26%)</title><rect x="7.9812%" y="277" width="15.2582%" height="15" fill="rgb(242,79,21)" fg:x="136" fg:w="260"/><text x="8.2312%" y="287.50">leef`&lt;json::object::Obj..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="23.1808%" y="261" width="0.0587%" height="15" fill="rgb(211,96,35)" fg:x="395" fg:w="1"/><text x="23.4308%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 1.58%)</title><rect x="23.2394%" y="277" width="1.5845%" height="15" fill="rgb(253,215,40)" fg:x="396" fg:w="27"/><text x="23.4894%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 1.00%)</title><rect x="23.8263%" y="261" width="0.9977%" height="15" fill="rgb(211,81,21)" fg:x="406" fg:w="17"/><text x="24.0763%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="24.8239%" y="277" width="0.0587%" height="15" fill="rgb(208,190,38)" fg:x="423" fg:w="1"/><text x="25.0739%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 1.17%)</title><rect x="24.8826%" y="277" width="1.1737%" height="15" fill="rgb(235,213,38)" fg:x="424" fg:w="20"/><text x="25.1326%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.18%)</title><rect x="26.0563%" y="277" width="0.1761%" height="15" fill="rgb(237,122,38)" fg:x="444" fg:w="3"/><text x="26.3063%" y="287.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (1 samples, 0.06%)</title><rect x="26.2324%" y="277" width="0.0587%" height="15" fill="rgb(244,218,35)" fg:x="447" fg:w="1"/><text x="26.4824%" y="287.50"></text></g><g><title>leef`&lt;json::value::JsonValue as core::ops::index::IndexMut&lt;alloc::string::String&gt;&gt;::index_mut (325 samples, 19.07%)</title><rect x="7.6291%" y="293" width="19.0728%" height="15" fill="rgb(240,68,47)" fg:x="130" fg:w="325"/><text x="7.8791%" y="303.50">leef`&lt;json::value::JsonValue a..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (7 samples, 0.41%)</title><rect x="26.2911%" y="277" width="0.4108%" height="15" fill="rgb(210,16,53)" fg:x="448" fg:w="7"/><text x="26.5411%" y="287.50"></text></g><g><title>leef`__rdl_alloc (1 samples, 0.06%)</title><rect x="26.7019%" y="293" width="0.0587%" height="15" fill="rgb(235,124,12)" fg:x="455" fg:w="1"/><text x="26.9519%" y="303.50"></text></g><g><title>leef`__rdl_dealloc (2 samples, 0.12%)</title><rect x="26.7606%" y="293" width="0.1174%" height="15" fill="rgb(224,169,11)" fg:x="456" fg:w="2"/><text x="27.0106%" y="303.50"></text></g><g><title>leef`__rust_alloc (1 samples, 0.06%)</title><rect x="26.8779%" y="293" width="0.0587%" height="15" fill="rgb(250,166,2)" fg:x="458" fg:w="1"/><text x="27.1279%" y="303.50"></text></g><g><title>leef`alloc::slice::hack::to_vec (3 samples, 0.18%)</title><rect x="26.9366%" y="293" width="0.1761%" height="15" fill="rgb(242,216,29)" fg:x="459" fg:w="3"/><text x="27.1866%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.18%)</title><rect x="26.9366%" y="277" width="0.1761%" height="15" fill="rgb(230,116,27)" fg:x="459" fg:w="3"/><text x="27.1866%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.18%)</title><rect x="26.9366%" y="261" width="0.1761%" height="15" fill="rgb(228,99,48)" fg:x="459" fg:w="3"/><text x="27.1866%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.18%)</title><rect x="26.9366%" y="245" width="0.1761%" height="15" fill="rgb(253,11,6)" fg:x="459" fg:w="3"/><text x="27.1866%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.18%)</title><rect x="26.9366%" y="229" width="0.1761%" height="15" fill="rgb(247,143,39)" fg:x="459" fg:w="3"/><text x="27.1866%" y="239.50"></text></g><g><title>leef`alloc::string::String::push (18 samples, 1.06%)</title><rect x="28.7559%" y="277" width="1.0563%" height="15" fill="rgb(236,97,10)" fg:x="490" fg:w="18"/><text x="29.0059%" y="287.50"></text></g><g><title>leef`core::unicode::unicode_data::conversions::to_lower (8 samples, 0.47%)</title><rect x="29.8122%" y="277" width="0.4695%" height="15" fill="rgb(233,208,19)" fg:x="508" fg:w="8"/><text x="30.0622%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (33 samples, 1.94%)</title><rect x="30.7512%" y="245" width="1.9366%" height="15" fill="rgb(216,164,2)" fg:x="524" fg:w="33"/><text x="31.0012%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.94%)</title><rect x="31.7488%" y="229" width="0.9390%" height="15" fill="rgb(220,129,5)" fg:x="541" fg:w="16"/><text x="31.9988%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 2.46%)</title><rect x="30.2817%" y="277" width="2.4648%" height="15" fill="rgb(242,17,10)" fg:x="516" fg:w="42"/><text x="30.5317%" y="287.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 2.11%)</title><rect x="30.6338%" y="261" width="2.1127%" height="15" fill="rgb(242,107,0)" fg:x="522" fg:w="36"/><text x="30.8838%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="32.6878%" y="245" width="0.0587%" height="15" fill="rgb(251,28,31)" fg:x="557" fg:w="1"/><text x="32.9378%" y="255.50"></text></g><g><title>leef`alloc::str::_&lt;impl str&gt;::to_lowercase (97 samples, 5.69%)</title><rect x="27.1127%" y="293" width="5.6925%" height="15" fill="rgb(233,223,10)" fg:x="462" fg:w="97"/><text x="27.3627%" y="303.50">leef`al..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="32.7465%" y="277" width="0.0587%" height="15" fill="rgb(215,21,27)" fg:x="558" fg:w="1"/><text x="32.9965%" y="287.50"></text></g><g><title>leef`alloc::string::String::push (3 samples, 0.18%)</title><rect x="32.8052%" y="293" width="0.1761%" height="15" fill="rgb(232,23,21)" fg:x="559" fg:w="3"/><text x="33.0552%" y="303.50"></text></g><g><title>leef`core::hash::BuildHasher::hash_one (59 samples, 3.46%)</title><rect x="32.9812%" y="293" width="3.4624%" height="15" fill="rgb(244,5,23)" fg:x="562" fg:w="59"/><text x="33.2312%" y="303.50">lee..</text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 2.05%)</title><rect x="34.3897%" y="277" width="2.0540%" height="15" fill="rgb(226,81,46)" fg:x="586" fg:w="35"/><text x="34.6397%" y="287.50">l..</text></g><g><title>leef`&lt;json::object::Key as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="36.8545%" y="261" width="0.0587%" height="15" fill="rgb(247,70,30)" fg:x="628" fg:w="1"/><text x="37.1045%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.12%)</title><rect x="37.0305%" y="245" width="0.1174%" height="15" fill="rgb(212,68,19)" fg:x="631" fg:w="2"/><text x="37.2805%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.29%)</title><rect x="36.9131%" y="261" width="0.2934%" height="15" fill="rgb(240,187,13)" fg:x="629" fg:w="5"/><text x="37.1631%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="37.1479%" y="245" width="0.0587%" height="15" fill="rgb(223,113,26)" fg:x="633" fg:w="1"/><text x="37.3979%" y="255.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::object::Node&gt; (10 samples, 0.59%)</title><rect x="36.7958%" y="277" width="0.5869%" height="15" fill="rgb(206,192,2)" fg:x="627" fg:w="10"/><text x="37.0458%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.18%)</title><rect x="37.2066%" y="261" width="0.1761%" height="15" fill="rgb(241,108,4)" fg:x="634" fg:w="3"/><text x="37.4566%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.88%)</title><rect x="37.3826%" y="277" width="0.8803%" height="15" fill="rgb(247,173,49)" fg:x="637" fg:w="15"/><text x="37.6326%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.70%)</title><rect x="37.5587%" y="261" width="0.7042%" height="15" fill="rgb(224,114,35)" fg:x="640" fg:w="12"/><text x="37.8087%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="38.2629%" y="277" width="0.0587%" height="15" fill="rgb(245,159,27)" fg:x="652" fg:w="1"/><text x="38.5129%" y="287.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (39 samples, 2.29%)</title><rect x="36.4437%" y="293" width="2.2887%" height="15" fill="rgb(245,172,44)" fg:x="621" fg:w="39"/><text x="36.6937%" y="303.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.41%)</title><rect x="38.3216%" y="277" width="0.4108%" height="15" fill="rgb(236,23,11)" fg:x="653" fg:w="7"/><text x="38.5716%" y="287.50"></text></g><g><title>leef`core::unicode::unicode_data::conversions::to_lower (2 samples, 0.12%)</title><rect x="38.7324%" y="293" width="0.1174%" height="15" fill="rgb(205,117,38)" fg:x="660" fg:w="2"/><text x="38.9824%" y="303.50"></text></g><g><title>leef`json::value::JsonValue::has_key (1 samples, 0.06%)</title><rect x="38.8498%" y="293" width="0.0587%" height="15" fill="rgb(237,72,25)" fg:x="662" fg:w="1"/><text x="39.0998%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.06%)</title><rect x="38.8498%" y="277" width="0.0587%" height="15" fill="rgb(244,70,9)" fg:x="662" fg:w="1"/><text x="39.0998%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.35%)</title><rect x="38.9085%" y="293" width="0.3521%" height="15" fill="rgb(217,125,39)" fg:x="663" fg:w="6"/><text x="39.1585%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.18%)</title><rect x="39.0845%" y="277" width="0.1761%" height="15" fill="rgb(235,36,10)" fg:x="666" fg:w="3"/><text x="39.3345%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.18%)</title><rect x="39.0845%" y="261" width="0.1761%" height="15" fill="rgb(251,123,47)" fg:x="666" fg:w="3"/><text x="39.3345%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="39.2019%" y="245" width="0.0587%" height="15" fill="rgb(221,13,13)" fg:x="668" fg:w="1"/><text x="39.4519%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.29%)</title><rect x="39.2606%" y="293" width="0.2934%" height="15" fill="rgb(238,131,9)" fg:x="669" fg:w="5"/><text x="39.5106%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.18%)</title><rect x="39.3779%" y="277" width="0.1761%" height="15" fill="rgb(211,50,8)" fg:x="671" fg:w="3"/><text x="39.6279%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.12%)</title><rect x="39.5540%" y="293" width="0.1174%" height="15" fill="rgb(245,182,24)" fg:x="674" fg:w="2"/><text x="39.8040%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.06%)</title><rect x="39.6127%" y="277" width="0.0587%" height="15" fill="rgb(242,14,37)" fg:x="675" fg:w="1"/><text x="39.8627%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.41%)</title><rect x="39.6714%" y="293" width="0.4108%" height="15" fill="rgb(246,228,12)" fg:x="676" fg:w="7"/><text x="39.9214%" y="303.50"></text></g><g><title>leef`leef::cn::normalizer_instance::Normalizer::normalize (661 samples, 38.79%)</title><rect x="1.5258%" y="309" width="38.7911%" height="15" fill="rgb(213,55,15)" fg:x="26" fg:w="661"/><text x="1.7758%" y="319.50">leef`leef::cn::normalizer_instance::Normalizer::normalize</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (4 samples, 0.23%)</title><rect x="40.0822%" y="293" width="0.2347%" height="15" fill="rgb(209,9,3)" fg:x="683" fg:w="4"/><text x="40.3322%" y="303.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="40.7864%" y="277" width="0.0587%" height="15" fill="rgb(230,59,30)" fg:x="695" fg:w="1"/><text x="41.0364%" y="287.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="40.7864%" y="261" width="0.0587%" height="15" fill="rgb(209,121,21)" fg:x="695" fg:w="1"/><text x="41.0364%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="40.7864%" y="245" width="0.0587%" height="15" fill="rgb(220,109,13)" fg:x="695" fg:w="1"/><text x="41.0364%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="40.7864%" y="229" width="0.0587%" height="15" fill="rgb(232,18,1)" fg:x="695" fg:w="1"/><text x="41.0364%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="40.7864%" y="213" width="0.0587%" height="15" fill="rgb(215,41,42)" fg:x="695" fg:w="1"/><text x="41.0364%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="40.7864%" y="197" width="0.0587%" height="15" fill="rgb(224,123,36)" fg:x="695" fg:w="1"/><text x="41.0364%" y="207.50"></text></g><g><title>leef`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.12%)</title><rect x="40.7864%" y="293" width="0.1174%" height="15" fill="rgb(240,125,3)" fg:x="695" fg:w="2"/><text x="41.0364%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="40.8451%" y="277" width="0.0587%" height="15" fill="rgb(205,98,50)" fg:x="696" fg:w="1"/><text x="41.0951%" y="287.50"></text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="40.9038%" y="293" width="0.0587%" height="15" fill="rgb(205,185,37)" fg:x="697" fg:w="1"/><text x="41.1538%" y="303.50"></text></g><g><title>leef`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (25 samples, 1.47%)</title><rect x="40.9624%" y="293" width="1.4671%" height="15" fill="rgb(238,207,15)" fg:x="698" fg:w="25"/><text x="41.2124%" y="303.50"></text></g><g><title>leef`core::str::pattern::TwoWaySearcher::next (22 samples, 1.29%)</title><rect x="41.1385%" y="277" width="1.2911%" height="15" fill="rgb(213,199,42)" fg:x="701" fg:w="22"/><text x="41.3885%" y="287.50"></text></g><g><title>leef`&lt;json::value::JsonValue as core::ops::index::Index&lt;&amp;str&gt;&gt;::index (2 samples, 0.12%)</title><rect x="42.4296%" y="293" width="0.1174%" height="15" fill="rgb(235,201,11)" fg:x="723" fg:w="2"/><text x="42.6796%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.12%)</title><rect x="42.4296%" y="277" width="0.1174%" height="15" fill="rgb(207,46,11)" fg:x="723" fg:w="2"/><text x="42.6796%" y="287.50"></text></g><g><title>leef`&lt;regex::re_bytes::CaptureNames as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="42.5469%" y="293" width="0.0587%" height="15" fill="rgb(241,35,35)" fg:x="725" fg:w="1"/><text x="42.7969%" y="303.50"></text></g><g><title>leef`&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;&amp;str&gt;&gt;::index (3 samples, 0.18%)</title><rect x="42.6056%" y="293" width="0.1761%" height="15" fill="rgb(243,32,47)" fg:x="726" fg:w="3"/><text x="42.8556%" y="303.50"></text></g><g><title>leef`regex::re_unicode::Captures::name (2 samples, 0.12%)</title><rect x="42.6643%" y="277" width="0.1174%" height="15" fill="rgb(247,202,23)" fg:x="727" fg:w="2"/><text x="42.9143%" y="287.50"></text></g><g><title>leef`core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="42.7230%" y="261" width="0.0587%" height="15" fill="rgb(219,102,11)" fg:x="728" fg:w="1"/><text x="42.9730%" y="271.50"></text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="42.7230%" y="245" width="0.0587%" height="15" fill="rgb(243,110,44)" fg:x="728" fg:w="1"/><text x="42.9730%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.18%)</title><rect x="42.9577%" y="181" width="0.1761%" height="15" fill="rgb(222,74,54)" fg:x="732" fg:w="3"/><text x="43.2077%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="43.0751%" y="165" width="0.0587%" height="15" fill="rgb(216,99,12)" fg:x="734" fg:w="1"/><text x="43.3251%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.06%)</title><rect x="43.1338%" y="181" width="0.0587%" height="15" fill="rgb(226,22,26)" fg:x="735" fg:w="1"/><text x="43.3838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="43.1925%" y="165" width="0.0587%" height="15" fill="rgb(217,163,10)" fg:x="736" fg:w="1"/><text x="43.4425%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.47%)</title><rect x="42.9577%" y="197" width="0.4695%" height="15" fill="rgb(213,25,53)" fg:x="732" fg:w="8"/><text x="43.2077%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.23%)</title><rect x="43.1925%" y="181" width="0.2347%" height="15" fill="rgb(252,105,26)" fg:x="736" fg:w="4"/><text x="43.4425%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.18%)</title><rect x="43.2512%" y="165" width="0.1761%" height="15" fill="rgb(220,39,43)" fg:x="737" fg:w="3"/><text x="43.5012%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.18%)</title><rect x="43.2512%" y="149" width="0.1761%" height="15" fill="rgb(229,68,48)" fg:x="737" fg:w="3"/><text x="43.5012%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="43.3685%" y="133" width="0.0587%" height="15" fill="rgb(252,8,32)" fg:x="739" fg:w="1"/><text x="43.6185%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.12%)</title><rect x="43.4272%" y="197" width="0.1174%" height="15" fill="rgb(223,20,43)" fg:x="740" fg:w="2"/><text x="43.6772%" y="207.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.82%)</title><rect x="42.8404%" y="245" width="0.8216%" height="15" fill="rgb(229,81,49)" fg:x="730" fg:w="14"/><text x="43.0904%" y="255.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (14 samples, 0.82%)</title><rect x="42.8404%" y="229" width="0.8216%" height="15" fill="rgb(236,28,36)" fg:x="730" fg:w="14"/><text x="43.0904%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.76%)</title><rect x="42.8991%" y="213" width="0.7629%" height="15" fill="rgb(249,185,26)" fg:x="731" fg:w="13"/><text x="43.1491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.12%)</title><rect x="43.5446%" y="197" width="0.1174%" height="15" fill="rgb(249,174,33)" fg:x="742" fg:w="2"/><text x="43.7946%" y="207.50"></text></g><g><title>leef`core::fmt::write (17 samples, 1.00%)</title><rect x="42.7817%" y="277" width="0.9977%" height="15" fill="rgb(233,201,37)" fg:x="729" fg:w="17"/><text x="43.0317%" y="287.50"></text></g><g><title>leef`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (16 samples, 0.94%)</title><rect x="42.8404%" y="261" width="0.9390%" height="15" fill="rgb(221,78,26)" fg:x="730" fg:w="16"/><text x="43.0904%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="43.6620%" y="245" width="0.1174%" height="15" fill="rgb(250,127,30)" fg:x="744" fg:w="2"/><text x="43.9120%" y="255.50"></text></g><g><title>leef`alloc::fmt::format::format_inner (19 samples, 1.12%)</title><rect x="42.7817%" y="293" width="1.1150%" height="15" fill="rgb(230,49,44)" fg:x="729" fg:w="19"/><text x="43.0317%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.12%)</title><rect x="43.7793%" y="277" width="0.1174%" height="15" fill="rgb(229,67,23)" fg:x="746" fg:w="2"/><text x="44.0293%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.12%)</title><rect x="43.7793%" y="261" width="0.1174%" height="15" fill="rgb(249,83,47)" fg:x="746" fg:w="2"/><text x="44.0293%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.12%)</title><rect x="43.7793%" y="245" width="0.1174%" height="15" fill="rgb(215,43,3)" fg:x="746" fg:w="2"/><text x="44.0293%" y="255.50"></text></g><g><title>leef`core::hash::BuildHasher::hash_one (3 samples, 0.18%)</title><rect x="43.8967%" y="293" width="0.1761%" height="15" fill="rgb(238,154,13)" fg:x="748" fg:w="3"/><text x="44.1467%" y="303.50"></text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="44.0141%" y="277" width="0.0587%" height="15" fill="rgb(219,56,2)" fg:x="750" fg:w="1"/><text x="44.2641%" y="287.50"></text></g><g><title>leef`__rdl_dealloc (1 samples, 0.06%)</title><rect x="44.0728%" y="277" width="0.0587%" height="15" fill="rgb(233,0,4)" fg:x="751" fg:w="1"/><text x="44.3228%" y="287.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::object::Node&gt; (3 samples, 0.18%)</title><rect x="44.1315%" y="261" width="0.1761%" height="15" fill="rgb(235,30,7)" fg:x="752" fg:w="3"/><text x="44.3815%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.18%)</title><rect x="44.1315%" y="245" width="0.1761%" height="15" fill="rgb(250,79,13)" fg:x="752" fg:w="3"/><text x="44.3815%" y="255.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::object::Node&gt; (3 samples, 0.18%)</title><rect x="44.4249%" y="245" width="0.1761%" height="15" fill="rgb(211,146,34)" fg:x="757" fg:w="3"/><text x="44.6749%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.12%)</title><rect x="44.6596%" y="229" width="0.1174%" height="15" fill="rgb(228,22,38)" fg:x="761" fg:w="2"/><text x="44.9096%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.29%)</title><rect x="44.6009%" y="245" width="0.2934%" height="15" fill="rgb(235,168,5)" fg:x="760" fg:w="5"/><text x="44.8509%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.12%)</title><rect x="44.7770%" y="229" width="0.1174%" height="15" fill="rgb(221,155,16)" fg:x="763" fg:w="2"/><text x="45.0270%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="44.8357%" y="213" width="0.0587%" height="15" fill="rgb(215,215,53)" fg:x="764" fg:w="1"/><text x="45.0857%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="44.8944%" y="245" width="0.0587%" height="15" fill="rgb(223,4,10)" fg:x="765" fg:w="1"/><text x="45.1444%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="44.8944%" y="229" width="0.0587%" height="15" fill="rgb(234,103,6)" fg:x="765" fg:w="1"/><text x="45.1444%" y="239.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (15 samples, 0.88%)</title><rect x="44.3075%" y="261" width="0.8803%" height="15" fill="rgb(227,97,0)" fg:x="755" fg:w="15"/><text x="44.5575%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.23%)</title><rect x="44.9531%" y="245" width="0.2347%" height="15" fill="rgb(234,150,53)" fg:x="766" fg:w="4"/><text x="45.2031%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.18%)</title><rect x="45.0117%" y="229" width="0.1761%" height="15" fill="rgb(228,201,54)" fg:x="767" fg:w="3"/><text x="45.2617%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.18%)</title><rect x="45.0117%" y="213" width="0.1761%" height="15" fill="rgb(222,22,37)" fg:x="767" fg:w="3"/><text x="45.2617%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="45.1878%" y="245" width="0.0587%" height="15" fill="rgb(237,53,32)" fg:x="770" fg:w="1"/><text x="45.4378%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.12%)</title><rect x="45.1878%" y="261" width="0.1174%" height="15" fill="rgb(233,25,53)" fg:x="770" fg:w="2"/><text x="45.4378%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.06%)</title><rect x="45.2465%" y="245" width="0.0587%" height="15" fill="rgb(210,40,34)" fg:x="771" fg:w="1"/><text x="45.4965%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="45.3052%" y="261" width="0.0587%" height="15" fill="rgb(241,220,44)" fg:x="772" fg:w="1"/><text x="45.5552%" y="271.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::object::Node&gt; (22 samples, 1.29%)</title><rect x="44.1315%" y="277" width="1.2911%" height="15" fill="rgb(235,28,35)" fg:x="752" fg:w="22"/><text x="44.3815%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="45.3638%" y="261" width="0.0587%" height="15" fill="rgb(210,56,17)" fg:x="773" fg:w="1"/><text x="45.6138%" y="271.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.06%)</title><rect x="45.4225%" y="277" width="0.0587%" height="15" fill="rgb(224,130,29)" fg:x="774" fg:w="1"/><text x="45.6725%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="45.4812%" y="261" width="0.0587%" height="15" fill="rgb(235,212,8)" fg:x="775" fg:w="1"/><text x="45.7312%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.12%)</title><rect x="45.4812%" y="277" width="0.1174%" height="15" fill="rgb(223,33,50)" fg:x="775" fg:w="2"/><text x="45.7312%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="45.5399%" y="261" width="0.0587%" height="15" fill="rgb(219,149,13)" fg:x="776" fg:w="1"/><text x="45.7899%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="45.5986%" y="277" width="0.0587%" height="15" fill="rgb(250,156,29)" fg:x="777" fg:w="1"/><text x="45.8486%" y="287.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (28 samples, 1.64%)</title><rect x="44.0728%" y="293" width="1.6432%" height="15" fill="rgb(216,193,19)" fg:x="751" fg:w="28"/><text x="44.3228%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.06%)</title><rect x="45.6573%" y="277" width="0.0587%" height="15" fill="rgb(216,135,14)" fg:x="778" fg:w="1"/><text x="45.9073%" y="287.50"></text></g><g><title>leef`core::str::pattern::StrSearcher::new (5 samples, 0.29%)</title><rect x="45.7160%" y="293" width="0.2934%" height="15" fill="rgb(241,47,5)" fg:x="779" fg:w="5"/><text x="45.9660%" y="303.50"></text></g><g><title>leef`DYLD-STUB$$memcpy (1 samples, 0.06%)</title><rect x="49.0023%" y="277" width="0.0587%" height="15" fill="rgb(233,42,35)" fg:x="835" fg:w="1"/><text x="49.2523%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="49.0610%" y="229" width="0.0587%" height="15" fill="rgb(231,13,6)" fg:x="836" fg:w="1"/><text x="49.3110%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.06%)</title><rect x="49.0610%" y="213" width="0.0587%" height="15" fill="rgb(207,181,40)" fg:x="836" fg:w="1"/><text x="49.3110%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="49.0610%" y="197" width="0.0587%" height="15" fill="rgb(254,173,49)" fg:x="836" fg:w="1"/><text x="49.3110%" y="207.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="49.0610%" y="277" width="0.1174%" height="15" fill="rgb(221,1,38)" fg:x="836" fg:w="2"/><text x="49.3110%" y="287.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="49.0610%" y="261" width="0.1174%" height="15" fill="rgb(206,124,46)" fg:x="836" fg:w="2"/><text x="49.3110%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.12%)</title><rect x="49.0610%" y="245" width="0.1174%" height="15" fill="rgb(249,21,11)" fg:x="836" fg:w="2"/><text x="49.3110%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="49.1197%" y="229" width="0.0587%" height="15" fill="rgb(222,201,40)" fg:x="837" fg:w="1"/><text x="49.3697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="49.2371%" y="181" width="0.0587%" height="15" fill="rgb(235,61,29)" fg:x="839" fg:w="1"/><text x="49.4871%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.12%)</title><rect x="49.2371%" y="213" width="0.1174%" height="15" fill="rgb(219,207,3)" fg:x="839" fg:w="2"/><text x="49.4871%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.12%)</title><rect x="49.2371%" y="197" width="0.1174%" height="15" fill="rgb(222,56,46)" fg:x="839" fg:w="2"/><text x="49.4871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="49.2958%" y="181" width="0.0587%" height="15" fill="rgb(239,76,54)" fg:x="840" fg:w="1"/><text x="49.5458%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.06%)</title><rect x="49.2958%" y="165" width="0.0587%" height="15" fill="rgb(231,124,27)" fg:x="840" fg:w="1"/><text x="49.5458%" y="175.50"></text></g><g><title>leef`alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.23%)</title><rect x="49.1784%" y="277" width="0.2347%" height="15" fill="rgb(249,195,6)" fg:x="838" fg:w="4"/><text x="49.4284%" y="287.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.18%)</title><rect x="49.2371%" y="261" width="0.1761%" height="15" fill="rgb(237,174,47)" fg:x="839" fg:w="3"/><text x="49.4871%" y="271.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (3 samples, 0.18%)</title><rect x="49.2371%" y="245" width="0.1761%" height="15" fill="rgb(206,201,31)" fg:x="839" fg:w="3"/><text x="49.4871%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.18%)</title><rect x="49.2371%" y="229" width="0.1761%" height="15" fill="rgb(231,57,52)" fg:x="839" fg:w="3"/><text x="49.4871%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="49.3545%" y="213" width="0.0587%" height="15" fill="rgb(248,177,22)" fg:x="841" fg:w="1"/><text x="49.6045%" y="223.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (2 samples, 0.12%)</title><rect x="49.4131%" y="277" width="0.1174%" height="15" fill="rgb(215,211,37)" fg:x="842" fg:w="2"/><text x="49.6631%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.06%)</title><rect x="52.6408%" y="165" width="0.0587%" height="15" fill="rgb(241,128,51)" fg:x="897" fg:w="1"/><text x="52.8908%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.35%)</title><rect x="52.4061%" y="181" width="0.3521%" height="15" fill="rgb(227,165,31)" fg:x="893" fg:w="6"/><text x="52.6561%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="52.6995%" y="165" width="0.0587%" height="15" fill="rgb(228,167,24)" fg:x="898" fg:w="1"/><text x="52.9495%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="52.7582%" y="181" width="0.0587%" height="15" fill="rgb(228,143,12)" fg:x="899" fg:w="1"/><text x="53.0082%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.06%)</title><rect x="52.8169%" y="165" width="0.0587%" height="15" fill="rgb(249,149,8)" fg:x="900" fg:w="1"/><text x="53.0669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.12%)</title><rect x="52.8169%" y="181" width="0.1174%" height="15" fill="rgb(243,35,44)" fg:x="900" fg:w="2"/><text x="53.0669%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="52.8756%" y="165" width="0.0587%" height="15" fill="rgb(246,89,9)" fg:x="901" fg:w="1"/><text x="53.1256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.29%)</title><rect x="52.9343%" y="165" width="0.2934%" height="15" fill="rgb(233,213,13)" fg:x="902" fg:w="5"/><text x="53.1843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.06%)</title><rect x="53.1690%" y="149" width="0.0587%" height="15" fill="rgb(233,141,41)" fg:x="906" fg:w="1"/><text x="53.4190%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.35%)</title><rect x="52.9343%" y="181" width="0.3521%" height="15" fill="rgb(239,167,4)" fg:x="902" fg:w="6"/><text x="53.1843%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="53.2277%" y="165" width="0.0587%" height="15" fill="rgb(209,217,16)" fg:x="907" fg:w="1"/><text x="53.4777%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="53.2864%" y="181" width="0.0587%" height="15" fill="rgb(219,88,35)" fg:x="908" fg:w="1"/><text x="53.5364%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="53.2864%" y="165" width="0.0587%" height="15" fill="rgb(220,193,23)" fg:x="908" fg:w="1"/><text x="53.5364%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 1.23%)</title><rect x="52.2300%" y="213" width="1.2324%" height="15" fill="rgb(230,90,52)" fg:x="890" fg:w="21"/><text x="52.4800%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 1.12%)</title><rect x="52.3474%" y="197" width="1.1150%" height="15" fill="rgb(252,106,19)" fg:x="892" fg:w="19"/><text x="52.5974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.12%)</title><rect x="53.3451%" y="181" width="0.1174%" height="15" fill="rgb(206,74,20)" fg:x="909" fg:w="2"/><text x="53.5951%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="53.4038%" y="165" width="0.0587%" height="15" fill="rgb(230,138,44)" fg:x="910" fg:w="1"/><text x="53.6538%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.12%)</title><rect x="53.4624%" y="213" width="0.1174%" height="15" fill="rgb(235,182,43)" fg:x="911" fg:w="2"/><text x="53.7124%" y="223.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 1.76%)</title><rect x="52.1127%" y="261" width="1.7606%" height="15" fill="rgb(242,16,51)" fg:x="888" fg:w="30"/><text x="52.3627%" y="271.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (29 samples, 1.70%)</title><rect x="52.1714%" y="245" width="1.7019%" height="15" fill="rgb(248,9,4)" fg:x="889" fg:w="29"/><text x="52.4214%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 1.70%)</title><rect x="52.1714%" y="229" width="1.7019%" height="15" fill="rgb(210,31,22)" fg:x="889" fg:w="29"/><text x="52.4214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.29%)</title><rect x="53.5798%" y="213" width="0.2934%" height="15" fill="rgb(239,54,39)" fg:x="913" fg:w="5"/><text x="53.8298%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.29%)</title><rect x="53.5798%" y="197" width="0.2934%" height="15" fill="rgb(230,99,41)" fg:x="913" fg:w="5"/><text x="53.8298%" y="207.50"></text></g><g><title>leef`json::object::Object::insert_index (77 samples, 4.52%)</title><rect x="49.5305%" y="277" width="4.5188%" height="15" fill="rgb(253,106,12)" fg:x="844" fg:w="77"/><text x="49.7805%" y="287.50">leef`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.18%)</title><rect x="53.8732%" y="261" width="0.1761%" height="15" fill="rgb(213,46,41)" fg:x="918" fg:w="3"/><text x="54.1232%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.76%)</title><rect x="54.1080%" y="261" width="0.7629%" height="15" fill="rgb(215,133,35)" fg:x="922" fg:w="13"/><text x="54.3580%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.59%)</title><rect x="54.2840%" y="245" width="0.5869%" height="15" fill="rgb(213,28,5)" fg:x="925" fg:w="10"/><text x="54.5340%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.29%)</title><rect x="54.5775%" y="229" width="0.2934%" height="15" fill="rgb(215,77,49)" fg:x="930" fg:w="5"/><text x="54.8275%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.12%)</title><rect x="55.1643%" y="229" width="0.1174%" height="15" fill="rgb(248,100,22)" fg:x="940" fg:w="2"/><text x="55.4143%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 1.41%)</title><rect x="54.0493%" y="277" width="1.4085%" height="15" fill="rgb(208,67,9)" fg:x="921" fg:w="24"/><text x="54.2993%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.59%)</title><rect x="54.8709%" y="261" width="0.5869%" height="15" fill="rgb(219,133,21)" fg:x="935" fg:w="10"/><text x="55.1209%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.59%)</title><rect x="54.8709%" y="245" width="0.5869%" height="15" fill="rgb(246,46,29)" fg:x="935" fg:w="10"/><text x="55.1209%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.18%)</title><rect x="55.2817%" y="229" width="0.1761%" height="15" fill="rgb(246,185,52)" fg:x="942" fg:w="3"/><text x="55.5317%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.12%)</title><rect x="55.3404%" y="213" width="0.1174%" height="15" fill="rgb(252,136,11)" fg:x="943" fg:w="2"/><text x="55.5904%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="55.4577%" y="277" width="0.0587%" height="15" fill="rgb(219,138,53)" fg:x="945" fg:w="1"/><text x="55.7077%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="55.5164%" y="277" width="0.0587%" height="15" fill="rgb(211,51,23)" fg:x="946" fg:w="1"/><text x="55.7664%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.18%)</title><rect x="55.5751%" y="277" width="0.1761%" height="15" fill="rgb(247,221,28)" fg:x="947" fg:w="3"/><text x="55.8251%" y="287.50"></text></g><g><title>leef`json::parser::Parser::parse (168 samples, 9.86%)</title><rect x="46.0094%" y="293" width="9.8592%" height="15" fill="rgb(251,222,45)" fg:x="784" fg:w="168"/><text x="46.2594%" y="303.50">leef`json::par..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="55.7512%" y="277" width="0.1174%" height="15" fill="rgb(217,162,53)" fg:x="950" fg:w="2"/><text x="56.0012%" y="287.50"></text></g><g><title>leef`DYLD-STUB$$memcpy (1 samples, 0.06%)</title><rect x="56.2207%" y="277" width="0.0587%" height="15" fill="rgb(229,93,14)" fg:x="958" fg:w="1"/><text x="56.4707%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="57.9225%" y="229" width="0.0587%" height="15" fill="rgb(209,67,49)" fg:x="987" fg:w="1"/><text x="58.1725%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="57.9225%" y="213" width="0.0587%" height="15" fill="rgb(213,87,29)" fg:x="987" fg:w="1"/><text x="58.1725%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="57.9225%" y="197" width="0.0587%" height="15" fill="rgb(205,151,52)" fg:x="987" fg:w="1"/><text x="58.1725%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.06%)</title><rect x="57.9812%" y="197" width="0.0587%" height="15" fill="rgb(253,215,39)" fg:x="988" fg:w="1"/><text x="58.2312%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="58.0399%" y="181" width="0.0587%" height="15" fill="rgb(221,220,41)" fg:x="989" fg:w="1"/><text x="58.2899%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.18%)</title><rect x="58.0986%" y="181" width="0.1761%" height="15" fill="rgb(218,133,21)" fg:x="990" fg:w="3"/><text x="58.3486%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.06%)</title><rect x="58.2746%" y="181" width="0.0587%" height="15" fill="rgb(221,193,43)" fg:x="993" fg:w="1"/><text x="58.5246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.06%)</title><rect x="58.3333%" y="165" width="0.0587%" height="15" fill="rgb(240,128,52)" fg:x="994" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.06%)</title><rect x="58.3333%" y="149" width="0.0587%" height="15" fill="rgb(253,114,12)" fg:x="994" fg:w="1"/><text x="58.5833%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="58.3333%" y="181" width="0.1174%" height="15" fill="rgb(215,223,47)" fg:x="994" fg:w="2"/><text x="58.5833%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="58.3920%" y="165" width="0.0587%" height="15" fill="rgb(248,225,23)" fg:x="995" fg:w="1"/><text x="58.6420%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.12%)</title><rect x="58.4507%" y="181" width="0.1174%" height="15" fill="rgb(250,108,0)" fg:x="996" fg:w="2"/><text x="58.7007%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.12%)</title><rect x="58.4507%" y="165" width="0.1174%" height="15" fill="rgb(228,208,7)" fg:x="996" fg:w="2"/><text x="58.7007%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.65%)</title><rect x="57.9812%" y="213" width="0.6455%" height="15" fill="rgb(244,45,10)" fg:x="988" fg:w="11"/><text x="58.2312%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.59%)</title><rect x="58.0399%" y="197" width="0.5869%" height="15" fill="rgb(207,125,25)" fg:x="989" fg:w="10"/><text x="58.2899%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="58.5681%" y="181" width="0.0587%" height="15" fill="rgb(210,195,18)" fg:x="998" fg:w="1"/><text x="58.8181%" y="191.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.82%)</title><rect x="57.8638%" y="261" width="0.8216%" height="15" fill="rgb(249,80,12)" fg:x="986" fg:w="14"/><text x="58.1138%" y="271.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (13 samples, 0.76%)</title><rect x="57.9225%" y="245" width="0.7629%" height="15" fill="rgb(221,65,9)" fg:x="987" fg:w="13"/><text x="58.1725%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.70%)</title><rect x="57.9812%" y="229" width="0.7042%" height="15" fill="rgb(235,49,36)" fg:x="988" fg:w="12"/><text x="58.2312%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.06%)</title><rect x="58.6268%" y="213" width="0.0587%" height="15" fill="rgb(225,32,20)" fg:x="999" fg:w="1"/><text x="58.8768%" y="223.50"></text></g><g><title>leef`json::value::JsonValue::insert (52 samples, 3.05%)</title><rect x="55.8685%" y="293" width="3.0516%" height="15" fill="rgb(215,141,46)" fg:x="952" fg:w="52"/><text x="56.1185%" y="303.50">lee..</text></g><g><title>leef`json::object::Object::insert_index (45 samples, 2.64%)</title><rect x="56.2793%" y="277" width="2.6408%" height="15" fill="rgb(250,160,47)" fg:x="959" fg:w="45"/><text x="56.5293%" y="287.50">le..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.23%)</title><rect x="58.6854%" y="261" width="0.2347%" height="15" fill="rgb(216,222,40)" fg:x="1000" fg:w="4"/><text x="58.9354%" y="271.50"></text></g><g><title>leef`__rust_alloc (1 samples, 0.06%)</title><rect x="58.9202%" y="277" width="0.0587%" height="15" fill="rgb(234,217,39)" fg:x="1004" fg:w="1"/><text x="59.1702%" y="287.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.06%)</title><rect x="59.1549%" y="261" width="0.0587%" height="15" fill="rgb(207,178,40)" fg:x="1008" fg:w="1"/><text x="59.4049%" y="271.50"></text></g><g><title>leef`json::object::Object::insert_index (3 samples, 0.18%)</title><rect x="59.2136%" y="261" width="0.1761%" height="15" fill="rgb(221,136,13)" fg:x="1009" fg:w="3"/><text x="59.4636%" y="271.50"></text></g><g><title>leef`json::value::JsonValue::remove (11 samples, 0.65%)</title><rect x="58.9202%" y="293" width="0.6455%" height="15" fill="rgb(249,199,10)" fg:x="1004" fg:w="11"/><text x="59.1702%" y="303.50"></text></g><g><title>leef`json::object::Object::remove (10 samples, 0.59%)</title><rect x="58.9789%" y="277" width="0.5869%" height="15" fill="rgb(249,222,13)" fg:x="1005" fg:w="10"/><text x="59.2289%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.18%)</title><rect x="59.3897%" y="261" width="0.1761%" height="15" fill="rgb(244,185,38)" fg:x="1012" fg:w="3"/><text x="59.6397%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.18%)</title><rect x="59.3897%" y="245" width="0.1761%" height="15" fill="rgb(236,202,9)" fg:x="1012" fg:w="3"/><text x="59.6397%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.18%)</title><rect x="59.3897%" y="229" width="0.1761%" height="15" fill="rgb(250,229,37)" fg:x="1012" fg:w="3"/><text x="59.6397%" y="239.50"></text></g><g><title>leef`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="59.8005%" y="277" width="0.0587%" height="15" fill="rgb(206,174,23)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="59.8005%" y="261" width="0.0587%" height="15" fill="rgb(211,33,43)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="59.8005%" y="245" width="0.0587%" height="15" fill="rgb(245,58,50)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.06%)</title><rect x="59.8005%" y="229" width="0.0587%" height="15" fill="rgb(244,68,36)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="59.8005%" y="213" width="0.0587%" height="15" fill="rgb(232,229,15)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="223.50"></text></g><g><title>leef`&lt;json::object::Object as core::ops::index::IndexMut&lt;&amp;str&gt;&gt;::index_mut (3 samples, 0.18%)</title><rect x="59.8592%" y="261" width="0.1761%" height="15" fill="rgb(254,30,23)" fg:x="1020" fg:w="3"/><text x="60.1092%" y="271.50"></text></g><g><title>leef`json::object::Object::insert_index (3 samples, 0.18%)</title><rect x="59.8592%" y="245" width="0.1761%" height="15" fill="rgb(235,160,14)" fg:x="1020" fg:w="3"/><text x="60.1092%" y="255.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="59.9765%" y="229" width="0.0587%" height="15" fill="rgb(212,155,44)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="239.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="59.9765%" y="213" width="0.0587%" height="15" fill="rgb(226,2,50)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="59.9765%" y="197" width="0.0587%" height="15" fill="rgb(234,177,6)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="59.9765%" y="181" width="0.0587%" height="15" fill="rgb(217,24,9)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="59.9765%" y="165" width="0.0587%" height="15" fill="rgb(220,13,46)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="175.50"></text></g><g><title>leef`&lt;json::value::JsonValue as core::ops::index::IndexMut&lt;alloc::string::String&gt;&gt;::index_mut (4 samples, 0.23%)</title><rect x="59.8592%" y="277" width="0.2347%" height="15" fill="rgb(239,221,27)" fg:x="1020" fg:w="4"/><text x="60.1092%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="60.0352%" y="261" width="0.0587%" height="15" fill="rgb(222,198,25)" fg:x="1023" fg:w="1"/><text x="60.2852%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.12%)</title><rect x="60.5634%" y="197" width="0.1174%" height="15" fill="rgb(211,99,13)" fg:x="1032" fg:w="2"/><text x="60.8134%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.12%)</title><rect x="60.5634%" y="181" width="0.1174%" height="15" fill="rgb(232,111,31)" fg:x="1032" fg:w="2"/><text x="60.8134%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.12%)</title><rect x="60.5634%" y="165" width="0.1174%" height="15" fill="rgb(245,82,37)" fg:x="1032" fg:w="2"/><text x="60.8134%" y="175.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.29%)</title><rect x="60.4460%" y="229" width="0.2934%" height="15" fill="rgb(227,149,46)" fg:x="1030" fg:w="5"/><text x="60.6960%" y="239.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (4 samples, 0.23%)</title><rect x="60.5047%" y="213" width="0.2347%" height="15" fill="rgb(218,36,50)" fg:x="1031" fg:w="4"/><text x="60.7547%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="60.6808%" y="197" width="0.0587%" height="15" fill="rgb(226,80,48)" fg:x="1034" fg:w="1"/><text x="60.9308%" y="207.50"></text></g><g><title>leef`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.47%)</title><rect x="60.3286%" y="245" width="0.4695%" height="15" fill="rgb(238,224,15)" fg:x="1028" fg:w="8"/><text x="60.5786%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="60.7394%" y="229" width="0.0587%" height="15" fill="rgb(241,136,10)" fg:x="1035" fg:w="1"/><text x="60.9894%" y="239.50"></text></g><g><title>leef`core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="60.7981%" y="245" width="0.0587%" height="15" fill="rgb(208,32,45)" fg:x="1036" fg:w="1"/><text x="61.0481%" y="255.50"></text></g><g><title>leef`alloc::fmt::format::format_inner (15 samples, 0.88%)</title><rect x="60.0939%" y="277" width="0.8803%" height="15" fill="rgb(207,135,9)" fg:x="1024" fg:w="15"/><text x="60.3439%" y="287.50"></text></g><g><title>leef`core::fmt::write (15 samples, 0.88%)</title><rect x="60.0939%" y="261" width="0.8803%" height="15" fill="rgb(206,86,44)" fg:x="1024" fg:w="15"/><text x="60.3439%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="60.8568%" y="245" width="0.1174%" height="15" fill="rgb(245,177,15)" fg:x="1037" fg:w="2"/><text x="61.1068%" y="255.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.06%)</title><rect x="60.9742%" y="277" width="0.0587%" height="15" fill="rgb(206,64,50)" fg:x="1039" fg:w="1"/><text x="61.2242%" y="287.50"></text></g><g><title>leef`json::value::JsonValue::is_array (1 samples, 0.06%)</title><rect x="61.0329%" y="277" width="0.0587%" height="15" fill="rgb(234,36,40)" fg:x="1040" fg:w="1"/><text x="61.2829%" y="287.50"></text></g><g><title>leef`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.18%)</title><rect x="61.2089%" y="261" width="0.1761%" height="15" fill="rgb(213,64,8)" fg:x="1043" fg:w="3"/><text x="61.4589%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.18%)</title><rect x="61.2089%" y="245" width="0.1761%" height="15" fill="rgb(210,75,36)" fg:x="1043" fg:w="3"/><text x="61.4589%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.18%)</title><rect x="61.2089%" y="229" width="0.1761%" height="15" fill="rgb(229,88,21)" fg:x="1043" fg:w="3"/><text x="61.4589%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.12%)</title><rect x="61.2676%" y="213" width="0.1174%" height="15" fill="rgb(252,204,47)" fg:x="1044" fg:w="2"/><text x="61.5176%" y="223.50"></text></g><g><title>leef`&lt;json::value::JsonValue as core::ops::index::Index&lt;&amp;str&gt;&gt;::index (1 samples, 0.06%)</title><rect x="61.3850%" y="261" width="0.0587%" height="15" fill="rgb(208,77,27)" fg:x="1046" fg:w="1"/><text x="61.6350%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="65.9038%" y="133" width="0.0587%" height="15" fill="rgb(221,76,26)" fg:x="1123" fg:w="1"/><text x="66.1538%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="65.9038%" y="117" width="0.0587%" height="15" fill="rgb(225,139,18)" fg:x="1123" fg:w="1"/><text x="66.1538%" y="127.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.23%)</title><rect x="65.7864%" y="213" width="0.2347%" height="15" fill="rgb(230,137,11)" fg:x="1121" fg:w="4"/><text x="66.0364%" y="223.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (4 samples, 0.23%)</title><rect x="65.7864%" y="197" width="0.2347%" height="15" fill="rgb(212,28,1)" fg:x="1121" fg:w="4"/><text x="66.0364%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.18%)</title><rect x="65.8451%" y="181" width="0.1761%" height="15" fill="rgb(248,164,17)" fg:x="1122" fg:w="3"/><text x="66.0951%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.12%)</title><rect x="65.9038%" y="165" width="0.1174%" height="15" fill="rgb(222,171,42)" fg:x="1123" fg:w="2"/><text x="66.1538%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.12%)</title><rect x="65.9038%" y="149" width="0.1174%" height="15" fill="rgb(243,84,45)" fg:x="1123" fg:w="2"/><text x="66.1538%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="65.9624%" y="133" width="0.0587%" height="15" fill="rgb(252,49,23)" fg:x="1124" fg:w="1"/><text x="66.2124%" y="143.50"></text></g><g><title>leef`json::object::Object::insert_index (40 samples, 2.35%)</title><rect x="63.7324%" y="229" width="2.3474%" height="15" fill="rgb(215,19,7)" fg:x="1086" fg:w="40"/><text x="63.9824%" y="239.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="66.0211%" y="213" width="0.0587%" height="15" fill="rgb(238,81,41)" fg:x="1125" fg:w="1"/><text x="66.2711%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.06%)</title><rect x="66.0798%" y="229" width="0.0587%" height="15" fill="rgb(210,199,37)" fg:x="1126" fg:w="1"/><text x="66.3298%" y="239.50"></text></g><g><title>leef`&lt;json::object::Object as core::ops::index::IndexMut&lt;&amp;str&gt;&gt;::index_mut (84 samples, 4.93%)</title><rect x="61.4437%" y="245" width="4.9296%" height="15" fill="rgb(244,192,49)" fg:x="1047" fg:w="84"/><text x="61.6937%" y="255.50">leef`&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (4 samples, 0.23%)</title><rect x="66.1385%" y="229" width="0.2347%" height="15" fill="rgb(226,211,11)" fg:x="1127" fg:w="4"/><text x="66.3885%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.29%)</title><rect x="66.3732%" y="245" width="0.2934%" height="15" fill="rgb(236,162,54)" fg:x="1131" fg:w="5"/><text x="66.6232%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.23%)</title><rect x="66.4319%" y="229" width="0.2347%" height="15" fill="rgb(220,229,9)" fg:x="1132" fg:w="4"/><text x="66.6819%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.29%)</title><rect x="66.6667%" y="245" width="0.2934%" height="15" fill="rgb(250,87,22)" fg:x="1136" fg:w="5"/><text x="66.9167%" y="255.50"></text></g><g><title>leef`&lt;json::value::JsonValue as core::ops::index::IndexMut&lt;alloc::string::String&gt;&gt;::index_mut (97 samples, 5.69%)</title><rect x="61.4437%" y="261" width="5.6925%" height="15" fill="rgb(239,43,17)" fg:x="1047" fg:w="97"/><text x="61.6937%" y="271.50">leef`&lt;j..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (3 samples, 0.18%)</title><rect x="66.9601%" y="245" width="0.1761%" height="15" fill="rgb(231,177,25)" fg:x="1141" fg:w="3"/><text x="67.2101%" y="255.50"></text></g><g><title>leef`DYLD-STUB$$memcmp (1 samples, 0.06%)</title><rect x="67.1362%" y="261" width="0.0587%" height="15" fill="rgb(219,179,1)" fg:x="1144" fg:w="1"/><text x="67.3862%" y="271.50"></text></g><g><title>leef`__rust_dealloc (1 samples, 0.06%)</title><rect x="67.1948%" y="261" width="0.0587%" height="15" fill="rgb(238,219,53)" fg:x="1145" fg:w="1"/><text x="67.4448%" y="271.50"></text></g><g><title>leef`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="67.6643%" y="245" width="0.0587%" height="15" fill="rgb(232,167,36)" fg:x="1153" fg:w="1"/><text x="67.9143%" y="255.50"></text></g><g><title>leef`core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="67.7230%" y="245" width="0.0587%" height="15" fill="rgb(244,19,51)" fg:x="1154" fg:w="1"/><text x="67.9730%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.59%)</title><rect x="68.5446%" y="181" width="0.5869%" height="15" fill="rgb(224,6,22)" fg:x="1168" fg:w="10"/><text x="68.7946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.59%)</title><rect x="68.5446%" y="165" width="0.5869%" height="15" fill="rgb(224,145,5)" fg:x="1168" fg:w="10"/><text x="68.7946%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.59%)</title><rect x="68.5446%" y="149" width="0.5869%" height="15" fill="rgb(234,130,49)" fg:x="1168" fg:w="10"/><text x="68.7946%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.29%)</title><rect x="68.8380%" y="133" width="0.2934%" height="15" fill="rgb(254,6,2)" fg:x="1173" fg:w="5"/><text x="69.0880%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="69.1315%" y="181" width="0.0587%" height="15" fill="rgb(208,96,46)" fg:x="1178" fg:w="1"/><text x="69.3815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.06%)</title><rect x="69.2488%" y="149" width="0.0587%" height="15" fill="rgb(239,3,39)" fg:x="1180" fg:w="1"/><text x="69.4988%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.12%)</title><rect x="69.3075%" y="149" width="0.1174%" height="15" fill="rgb(233,210,1)" fg:x="1181" fg:w="2"/><text x="69.5575%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.53%)</title><rect x="69.4249%" y="149" width="0.5282%" height="15" fill="rgb(244,137,37)" fg:x="1183" fg:w="9"/><text x="69.6749%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.12%)</title><rect x="70.0704%" y="133" width="0.1174%" height="15" fill="rgb(240,136,2)" fg:x="1194" fg:w="2"/><text x="70.3204%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.35%)</title><rect x="70.1878%" y="133" width="0.3521%" height="15" fill="rgb(239,18,37)" fg:x="1196" fg:w="6"/><text x="70.4378%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 1.70%)</title><rect x="69.1901%" y="165" width="1.7019%" height="15" fill="rgb(218,185,22)" fg:x="1179" fg:w="29"/><text x="69.4401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.94%)</title><rect x="69.9531%" y="149" width="0.9390%" height="15" fill="rgb(225,218,4)" fg:x="1192" fg:w="16"/><text x="70.2031%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.35%)</title><rect x="70.5399%" y="133" width="0.3521%" height="15" fill="rgb(230,182,32)" fg:x="1202" fg:w="6"/><text x="70.7899%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.29%)</title><rect x="70.5986%" y="117" width="0.2934%" height="15" fill="rgb(242,56,43)" fg:x="1203" fg:w="5"/><text x="70.8486%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.12%)</title><rect x="70.7746%" y="101" width="0.1174%" height="15" fill="rgb(233,99,24)" fg:x="1206" fg:w="2"/><text x="71.0246%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.35%)</title><rect x="70.8920%" y="165" width="0.3521%" height="15" fill="rgb(234,209,42)" fg:x="1208" fg:w="6"/><text x="71.1420%" y="175.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (53 samples, 3.11%)</title><rect x="68.2512%" y="213" width="3.1103%" height="15" fill="rgb(227,7,12)" fg:x="1163" fg:w="53"/><text x="68.5012%" y="223.50">lee..</text></g><g><title>leef`alloc::raw_vec::finish_grow (49 samples, 2.88%)</title><rect x="68.4859%" y="197" width="2.8756%" height="15" fill="rgb(245,203,43)" fg:x="1167" fg:w="49"/><text x="68.7359%" y="207.50">le..</text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 2.17%)</title><rect x="69.1901%" y="181" width="2.1714%" height="15" fill="rgb(238,205,33)" fg:x="1179" fg:w="37"/><text x="69.4401%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.12%)</title><rect x="71.2441%" y="165" width="0.1174%" height="15" fill="rgb(231,56,7)" fg:x="1214" fg:w="2"/><text x="71.4941%" y="175.50"></text></g><g><title>leef`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (56 samples, 3.29%)</title><rect x="68.1338%" y="229" width="3.2864%" height="15" fill="rgb(244,186,29)" fg:x="1161" fg:w="56"/><text x="68.3838%" y="239.50">lee..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="71.3615%" y="213" width="0.0587%" height="15" fill="rgb(234,111,31)" fg:x="1216" fg:w="1"/><text x="71.6115%" y="223.50"></text></g><g><title>leef`&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="71.4202%" y="229" width="0.0587%" height="15" fill="rgb(241,149,10)" fg:x="1217" fg:w="1"/><text x="71.6702%" y="239.50"></text></g><g><title>leef`core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="71.4789%" y="229" width="0.0587%" height="15" fill="rgb(249,206,44)" fg:x="1218" fg:w="1"/><text x="71.7289%" y="239.50"></text></g><g><title>leef`alloc::fmt::format::format_inner (74 samples, 4.34%)</title><rect x="67.2535%" y="261" width="4.3427%" height="15" fill="rgb(251,153,30)" fg:x="1146" fg:w="74"/><text x="67.5035%" y="271.50">leef`..</text></g><g><title>leef`core::fmt::write (65 samples, 3.81%)</title><rect x="67.7817%" y="245" width="3.8146%" height="15" fill="rgb(239,152,38)" fg:x="1155" fg:w="65"/><text x="68.0317%" y="255.50">leef..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="71.5376%" y="229" width="0.0587%" height="15" fill="rgb(249,139,47)" fg:x="1219" fg:w="1"/><text x="71.7876%" y="239.50"></text></g><g><title>leef`json::value::JsonValue::has_key (1 samples, 0.06%)</title><rect x="71.5962%" y="261" width="0.0587%" height="15" fill="rgb(244,64,35)" fg:x="1220" fg:w="1"/><text x="71.8462%" y="271.50"></text></g><g><title>leef`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="72.0657%" y="245" width="0.0587%" height="15" fill="rgb(216,46,15)" fg:x="1228" fg:w="1"/><text x="72.3157%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.12%)</title><rect x="76.8192%" y="117" width="0.1174%" height="15" fill="rgb(250,74,19)" fg:x="1309" fg:w="2"/><text x="77.0692%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="76.8779%" y="101" width="0.0587%" height="15" fill="rgb(249,42,33)" fg:x="1310" fg:w="1"/><text x="77.1279%" y="111.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.35%)</title><rect x="76.8192%" y="197" width="0.3521%" height="15" fill="rgb(242,149,17)" fg:x="1309" fg:w="6"/><text x="77.0692%" y="207.50"></text></g><g><title>leef`alloc::raw_vec::finish_grow (6 samples, 0.35%)</title><rect x="76.8192%" y="181" width="0.3521%" height="15" fill="rgb(244,29,21)" fg:x="1309" fg:w="6"/><text x="77.0692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.35%)</title><rect x="76.8192%" y="165" width="0.3521%" height="15" fill="rgb(220,130,37)" fg:x="1309" fg:w="6"/><text x="77.0692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.35%)</title><rect x="76.8192%" y="149" width="0.3521%" height="15" fill="rgb(211,67,2)" fg:x="1309" fg:w="6"/><text x="77.0692%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.35%)</title><rect x="76.8192%" y="133" width="0.3521%" height="15" fill="rgb(235,68,52)" fg:x="1309" fg:w="6"/><text x="77.0692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.23%)</title><rect x="76.9366%" y="117" width="0.2347%" height="15" fill="rgb(246,142,3)" fg:x="1311" fg:w="4"/><text x="77.1866%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.23%)</title><rect x="76.9366%" y="101" width="0.2347%" height="15" fill="rgb(241,25,7)" fg:x="1311" fg:w="4"/><text x="77.1866%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.06%)</title><rect x="77.1127%" y="85" width="0.0587%" height="15" fill="rgb(242,119,39)" fg:x="1314" fg:w="1"/><text x="77.3627%" y="95.50"></text></g><g><title>leef`json::object::Object::insert_index (32 samples, 1.88%)</title><rect x="75.3521%" y="213" width="1.8779%" height="15" fill="rgb(241,98,45)" fg:x="1284" fg:w="32"/><text x="75.6021%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="77.1714%" y="197" width="0.0587%" height="15" fill="rgb(254,28,30)" fg:x="1315" fg:w="1"/><text x="77.4214%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="77.1714%" y="181" width="0.0587%" height="15" fill="rgb(241,142,54)" fg:x="1315" fg:w="1"/><text x="77.4214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.06%)</title><rect x="77.1714%" y="165" width="0.0587%" height="15" fill="rgb(222,85,15)" fg:x="1315" fg:w="1"/><text x="77.4214%" y="175.50"></text></g><g><title>leef`&lt;json::object::Object as core::ops::index::IndexMut&lt;&amp;str&gt;&gt;::index_mut (89 samples, 5.22%)</title><rect x="72.1831%" y="229" width="5.2230%" height="15" fill="rgb(210,85,47)" fg:x="1230" fg:w="89"/><text x="72.4331%" y="239.50">leef`&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (3 samples, 0.18%)</title><rect x="77.2300%" y="213" width="0.1761%" height="15" fill="rgb(224,206,25)" fg:x="1316" fg:w="3"/><text x="77.4800%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.76%)</title><rect x="77.4061%" y="229" width="0.7629%" height="15" fill="rgb(243,201,19)" fg:x="1319" fg:w="13"/><text x="77.6561%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.53%)</title><rect x="77.6408%" y="213" width="0.5282%" height="15" fill="rgb(236,59,4)" fg:x="1323" fg:w="9"/><text x="77.8908%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.12%)</title><rect x="78.1690%" y="229" width="0.1174%" height="15" fill="rgb(254,179,45)" fg:x="1332" fg:w="2"/><text x="78.4190%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.23%)</title><rect x="78.2864%" y="229" width="0.2347%" height="15" fill="rgb(226,14,10)" fg:x="1334" fg:w="4"/><text x="78.5364%" y="239.50"></text></g><g><title>leef`&lt;json::value::JsonValue as core::ops::index::IndexMut&lt;alloc::string::String&gt;&gt;::index_mut (110 samples, 6.46%)</title><rect x="72.1244%" y="245" width="6.4554%" height="15" fill="rgb(244,27,41)" fg:x="1229" fg:w="110"/><text x="72.3744%" y="255.50">leef`&lt;js..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.06%)</title><rect x="78.5211%" y="229" width="0.0587%" height="15" fill="rgb(235,35,32)" fg:x="1338" fg:w="1"/><text x="78.7711%" y="239.50"></text></g><g><title>leef`core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="78.5798%" y="229" width="0.0587%" height="15" fill="rgb(218,68,31)" fg:x="1339" fg:w="1"/><text x="78.8298%" y="239.50"></text></g><g><title>leef`__rdl_realloc (2 samples, 0.12%)</title><rect x="79.1667%" y="165" width="0.1174%" height="15" fill="rgb(207,120,37)" fg:x="1349" fg:w="2"/><text x="79.4167%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.41%)</title><rect x="79.2840%" y="165" width="0.4108%" height="15" fill="rgb(227,98,0)" fg:x="1351" fg:w="7"/><text x="79.5340%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.41%)</title><rect x="79.2840%" y="149" width="0.4108%" height="15" fill="rgb(207,7,3)" fg:x="1351" fg:w="7"/><text x="79.5340%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.41%)</title><rect x="79.2840%" y="133" width="0.4108%" height="15" fill="rgb(206,98,19)" fg:x="1351" fg:w="7"/><text x="79.5340%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.35%)</title><rect x="79.3427%" y="117" width="0.3521%" height="15" fill="rgb(217,5,26)" fg:x="1352" fg:w="6"/><text x="79.5927%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.35%)</title><rect x="79.6948%" y="133" width="0.3521%" height="15" fill="rgb(235,190,38)" fg:x="1358" fg:w="6"/><text x="79.9448%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.06%)</title><rect x="80.1056%" y="117" width="0.0587%" height="15" fill="rgb(247,86,24)" fg:x="1365" fg:w="1"/><text x="80.3556%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.41%)</title><rect x="80.1643%" y="117" width="0.4108%" height="15" fill="rgb(205,101,16)" fg:x="1366" fg:w="7"/><text x="80.4143%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.23%)</title><rect x="80.5751%" y="117" width="0.2347%" height="15" fill="rgb(246,168,33)" fg:x="1373" fg:w="4"/><text x="80.8251%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.18%)</title><rect x="80.6338%" y="101" width="0.1761%" height="15" fill="rgb(231,114,1)" fg:x="1374" fg:w="3"/><text x="80.8838%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="80.7512%" y="85" width="0.0587%" height="15" fill="rgb(207,184,53)" fg:x="1376" fg:w="1"/><text x="81.0012%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.82%)</title><rect x="80.0469%" y="133" width="0.8216%" height="15" fill="rgb(224,95,51)" fg:x="1364" fg:w="14"/><text x="80.2969%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="80.8099%" y="117" width="0.0587%" height="15" fill="rgb(212,188,45)" fg:x="1377" fg:w="1"/><text x="81.0599%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 1.23%)</title><rect x="79.6948%" y="149" width="1.2324%" height="15" fill="rgb(223,154,38)" fg:x="1358" fg:w="21"/><text x="79.9448%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="80.8685%" y="133" width="0.0587%" height="15" fill="rgb(251,22,52)" fg:x="1378" fg:w="1"/><text x="81.1185%" y="143.50"></text></g><g><title>leef`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 2.29%)</title><rect x="78.9319%" y="197" width="2.2887%" height="15" fill="rgb(229,209,22)" fg:x="1345" fg:w="39"/><text x="79.1819%" y="207.50">l..</text></g><g><title>leef`alloc::raw_vec::finish_grow (36 samples, 2.11%)</title><rect x="79.1080%" y="181" width="2.1127%" height="15" fill="rgb(234,138,34)" fg:x="1348" fg:w="36"/><text x="79.3580%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 1.53%)</title><rect x="79.6948%" y="165" width="1.5258%" height="15" fill="rgb(212,95,11)" fg:x="1358" fg:w="26"/><text x="79.9448%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.29%)</title><rect x="80.9272%" y="149" width="0.2934%" height="15" fill="rgb(240,179,47)" fg:x="1379" fg:w="5"/><text x="81.1772%" y="159.50"></text></g><g><title>leef`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (41 samples, 2.41%)</title><rect x="78.8732%" y="213" width="2.4061%" height="15" fill="rgb(240,163,11)" fg:x="1344" fg:w="41"/><text x="79.1232%" y="223.50">le..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="81.2207%" y="197" width="0.0587%" height="15" fill="rgb(236,37,12)" fg:x="1384" fg:w="1"/><text x="81.4707%" y="207.50"></text></g><g><title>leef`&lt;str as core::fmt::Display&gt;::fmt (2 samples, 0.12%)</title><rect x="81.2793%" y="213" width="0.1174%" height="15" fill="rgb(232,164,16)" fg:x="1385" fg:w="2"/><text x="81.5293%" y="223.50"></text></g><g><title>leef`alloc::fmt::format::format_inner (49 samples, 2.88%)</title><rect x="78.5798%" y="245" width="2.8756%" height="15" fill="rgb(244,205,15)" fg:x="1339" fg:w="49"/><text x="78.8298%" y="255.50">le..</text></g><g><title>leef`core::fmt::write (48 samples, 2.82%)</title><rect x="78.6385%" y="229" width="2.8169%" height="15" fill="rgb(223,117,47)" fg:x="1340" fg:w="48"/><text x="78.8885%" y="239.50">le..</text></g><g><title>leef`core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="81.3967%" y="213" width="0.0587%" height="15" fill="rgb(244,107,35)" fg:x="1387" fg:w="1"/><text x="81.6467%" y="223.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;json::value::JsonValue&gt; (1 samples, 0.06%)</title><rect x="81.4554%" y="245" width="0.0587%" height="15" fill="rgb(205,140,8)" fg:x="1388" fg:w="1"/><text x="81.7054%" y="255.50"></text></g><g><title>leef`json::value::JsonValue::is_empty (1 samples, 0.06%)</title><rect x="81.5141%" y="245" width="0.0587%" height="15" fill="rgb(228,84,46)" fg:x="1389" fg:w="1"/><text x="81.7641%" y="255.50"></text></g><g><title>leef`leef::cn::parser_instance::Parser::_json_parser (170 samples, 9.98%)</title><rect x="71.6549%" y="261" width="9.9765%" height="15" fill="rgb(254,188,9)" fg:x="1221" fg:w="170"/><text x="71.9049%" y="271.50">leef`leef::cn:..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.06%)</title><rect x="81.5728%" y="245" width="0.0587%" height="15" fill="rgb(206,112,54)" fg:x="1390" fg:w="1"/><text x="81.8228%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.18%)</title><rect x="81.6315%" y="261" width="0.1761%" height="15" fill="rgb(216,84,49)" fg:x="1391" fg:w="3"/><text x="81.8815%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.12%)</title><rect x="81.6901%" y="245" width="0.1174%" height="15" fill="rgb(214,194,35)" fg:x="1392" fg:w="2"/><text x="81.9401%" y="255.50"></text></g><g><title>leef`leef::cn::parser_instance::Parser::_json_parser (380 samples, 22.30%)</title><rect x="59.5657%" y="293" width="22.3005%" height="15" fill="rgb(249,28,3)" fg:x="1015" fg:w="380"/><text x="59.8157%" y="303.50">leef`leef::cn::parser_instance::Par..</text></g><g><title>leef`leef::cn::parser_instance::Parser::_json_parser (354 samples, 20.77%)</title><rect x="61.0915%" y="277" width="20.7746%" height="15" fill="rgb(222,56,52)" fg:x="1041" fg:w="354"/><text x="61.3415%" y="287.50">leef`leef::cn::parser_instance::P..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="81.8075%" y="261" width="0.0587%" height="15" fill="rgb(245,217,50)" fg:x="1394" fg:w="1"/><text x="82.0575%" y="271.50"></text></g><g><title>leef`regex::dfa::Fsm::prefix_at (1 samples, 0.06%)</title><rect x="86.0915%" y="245" width="0.0587%" height="15" fill="rgb(213,201,24)" fg:x="1467" fg:w="1"/><text x="86.3415%" y="255.50"></text></g><g><title>leef`regex::backtrack::Bounded&lt;I&gt;::backtrack (108 samples, 6.34%)</title><rect x="86.1502%" y="197" width="6.3380%" height="15" fill="rgb(248,116,28)" fg:x="1468" fg:w="108"/><text x="86.4002%" y="207.50">leef`reg..</text></g><g><title>leef`regex::utf8::decode_utf8 (6 samples, 0.35%)</title><rect x="92.1362%" y="181" width="0.3521%" height="15" fill="rgb(219,72,43)" fg:x="1570" fg:w="6"/><text x="92.3862%" y="191.50"></text></g><g><title>leef`regex::utf8::decode_utf8 (1 samples, 0.06%)</title><rect x="92.4883%" y="197" width="0.0587%" height="15" fill="rgb(209,138,14)" fg:x="1576" fg:w="1"/><text x="92.7383%" y="207.50"></text></g><g><title>leef`regex::re_unicode::Regex::captures (184 samples, 10.80%)</title><rect x="81.8662%" y="293" width="10.7981%" height="15" fill="rgb(222,18,33)" fg:x="1395" fg:w="184"/><text x="82.1162%" y="303.50">leef`regex::re_u..</text></g><g><title>leef`regex::re_unicode::Regex::captures_read_at (184 samples, 10.80%)</title><rect x="81.8662%" y="277" width="10.7981%" height="15" fill="rgb(213,199,7)" fg:x="1395" fg:w="184"/><text x="82.1162%" y="287.50">leef`regex::re_u..</text></g><g><title>leef`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (184 samples, 10.80%)</title><rect x="81.8662%" y="261" width="10.7981%" height="15" fill="rgb(250,110,10)" fg:x="1395" fg:w="184"/><text x="82.1162%" y="271.50">leef`&lt;regex::exe..</text></g><g><title>leef`regex::exec::ExecNoSync::captures_nfa_type (111 samples, 6.51%)</title><rect x="86.1502%" y="245" width="6.5141%" height="15" fill="rgb(248,123,6)" fg:x="1468" fg:w="111"/><text x="86.4002%" y="255.50">leef`rege..</text></g><g><title>leef`regex::exec::ExecNoSync::exec_nfa (111 samples, 6.51%)</title><rect x="86.1502%" y="229" width="6.5141%" height="15" fill="rgb(206,91,31)" fg:x="1468" fg:w="111"/><text x="86.4002%" y="239.50">leef`rege..</text></g><g><title>leef`regex::backtrack::Bounded&lt;I&gt;::exec (111 samples, 6.51%)</title><rect x="86.1502%" y="213" width="6.5141%" height="15" fill="rgb(211,154,13)" fg:x="1468" fg:w="111"/><text x="86.4002%" y="223.50">leef`rege..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="92.5469%" y="197" width="0.1174%" height="15" fill="rgb(225,148,7)" fg:x="1577" fg:w="2"/><text x="92.7969%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.41%)</title><rect x="92.8404%" y="277" width="0.4108%" height="15" fill="rgb(220,160,43)" fg:x="1582" fg:w="7"/><text x="93.0904%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.41%)</title><rect x="92.8404%" y="261" width="0.4108%" height="15" fill="rgb(213,52,39)" fg:x="1582" fg:w="7"/><text x="93.0904%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="93.1925%" y="245" width="0.0587%" height="15" fill="rgb(243,137,7)" fg:x="1588" fg:w="1"/><text x="93.4425%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.70%)</title><rect x="92.6643%" y="293" width="0.7042%" height="15" fill="rgb(230,79,13)" fg:x="1579" fg:w="12"/><text x="92.9143%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.12%)</title><rect x="93.2512%" y="277" width="0.1174%" height="15" fill="rgb(247,105,23)" fg:x="1589" fg:w="2"/><text x="93.5012%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.12%)</title><rect x="93.2512%" y="261" width="0.1174%" height="15" fill="rgb(223,179,41)" fg:x="1589" fg:w="2"/><text x="93.5012%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="93.3099%" y="245" width="0.0587%" height="15" fill="rgb(218,9,34)" fg:x="1590" fg:w="1"/><text x="93.5599%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="93.3685%" y="293" width="0.0587%" height="15" fill="rgb(222,106,8)" fg:x="1591" fg:w="1"/><text x="93.6185%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.12%)</title><rect x="93.4272%" y="293" width="0.1174%" height="15" fill="rgb(211,220,0)" fg:x="1592" fg:w="2"/><text x="93.6772%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.12%)</title><rect x="93.4272%" y="277" width="0.1174%" height="15" fill="rgb(229,52,16)" fg:x="1592" fg:w="2"/><text x="93.6772%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="93.4859%" y="261" width="0.0587%" height="15" fill="rgb(212,155,18)" fg:x="1593" fg:w="1"/><text x="93.7359%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.06%)</title><rect x="93.5446%" y="293" width="0.0587%" height="15" fill="rgb(242,21,14)" fg:x="1594" fg:w="1"/><text x="93.7946%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="93.6033%" y="293" width="0.0587%" height="15" fill="rgb(222,19,48)" fg:x="1595" fg:w="1"/><text x="93.8533%" y="303.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$__bzero (1 samples, 0.06%)</title><rect x="93.6620%" y="293" width="0.0587%" height="15" fill="rgb(232,45,27)" fg:x="1596" fg:w="1"/><text x="93.9120%" y="303.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.06%)</title><rect x="93.7207%" y="293" width="0.0587%" height="15" fill="rgb(249,103,42)" fg:x="1597" fg:w="1"/><text x="93.9707%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="93.7793%" y="293" width="0.1174%" height="15" fill="rgb(246,81,33)" fg:x="1598" fg:w="2"/><text x="94.0293%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.12%)</title><rect x="93.8967%" y="293" width="0.1174%" height="15" fill="rgb(252,33,42)" fg:x="1600" fg:w="2"/><text x="94.1467%" y="303.50"></text></g><g><title>leef`leef::cn::parser_instance::Parser::parse (917 samples, 53.81%)</title><rect x="40.3169%" y="309" width="53.8146%" height="15" fill="rgb(209,212,41)" fg:x="687" fg:w="917"/><text x="40.5669%" y="319.50">leef`leef::cn::parser_instance::Parser::parse</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.12%)</title><rect x="94.0141%" y="293" width="0.1174%" height="15" fill="rgb(207,154,6)" fg:x="1602" fg:w="2"/><text x="94.2641%" y="303.50"></text></g><g><title>leef`core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="94.3662%" y="261" width="0.0587%" height="15" fill="rgb(223,64,47)" fg:x="1608" fg:w="1"/><text x="94.6162%" y="271.50"></text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="94.3662%" y="245" width="0.0587%" height="15" fill="rgb(211,161,38)" fg:x="1608" fg:w="1"/><text x="94.6162%" y="255.50"></text></g><g><title>leef`&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;&amp;str&gt;&gt;::index (3 samples, 0.18%)</title><rect x="94.3075%" y="293" width="0.1761%" height="15" fill="rgb(219,138,40)" fg:x="1607" fg:w="3"/><text x="94.5575%" y="303.50"></text></g><g><title>leef`regex::re_unicode::Captures::name (3 samples, 0.18%)</title><rect x="94.3075%" y="277" width="0.1761%" height="15" fill="rgb(241,228,46)" fg:x="1607" fg:w="3"/><text x="94.5575%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.06%)</title><rect x="94.4249%" y="261" width="0.0587%" height="15" fill="rgb(223,209,38)" fg:x="1609" fg:w="1"/><text x="94.6749%" y="271.50"></text></g><g><title>leef`core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="94.4836%" y="293" width="0.0587%" height="15" fill="rgb(236,164,45)" fg:x="1610" fg:w="1"/><text x="94.7336%" y="303.50"></text></g><g><title>leef`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="94.4836%" y="277" width="0.0587%" height="15" fill="rgb(231,15,5)" fg:x="1610" fg:w="1"/><text x="94.7336%" y="287.50"></text></g><g><title>leef`json::object::Object::insert_index (1 samples, 0.06%)</title><rect x="94.5423%" y="293" width="0.0587%" height="15" fill="rgb(252,35,15)" fg:x="1611" fg:w="1"/><text x="94.7923%" y="303.50"></text></g><g><title>leef`regex::dfa::Fsm::next_state (1 samples, 0.06%)</title><rect x="95.1291%" y="245" width="0.0587%" height="15" fill="rgb(248,181,18)" fg:x="1621" fg:w="1"/><text x="95.3791%" y="255.50"></text></g><g><title>leef`memchr::memmem::Finder::find (1 samples, 0.06%)</title><rect x="95.1878%" y="197" width="0.0587%" height="15" fill="rgb(233,39,42)" fg:x="1622" fg:w="1"/><text x="95.4378%" y="207.50"></text></g><g><title>leef`&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (23 samples, 1.35%)</title><rect x="94.7183%" y="261" width="1.3498%" height="15" fill="rgb(238,110,33)" fg:x="1614" fg:w="23"/><text x="94.9683%" y="271.50"></text></g><g><title>leef`regex::exec::ExecNoSync::captures_nfa_type (15 samples, 0.88%)</title><rect x="95.1878%" y="245" width="0.8803%" height="15" fill="rgb(233,195,10)" fg:x="1622" fg:w="15"/><text x="95.4378%" y="255.50"></text></g><g><title>leef`regex::exec::ExecNoSync::exec_nfa (15 samples, 0.88%)</title><rect x="95.1878%" y="229" width="0.8803%" height="15" fill="rgb(254,105,3)" fg:x="1622" fg:w="15"/><text x="95.4378%" y="239.50"></text></g><g><title>leef`regex::backtrack::Bounded&lt;I&gt;::exec (15 samples, 0.88%)</title><rect x="95.1878%" y="213" width="0.8803%" height="15" fill="rgb(221,225,9)" fg:x="1622" fg:w="15"/><text x="95.4378%" y="223.50"></text></g><g><title>leef`regex::backtrack::Bounded&lt;I&gt;::backtrack (14 samples, 0.82%)</title><rect x="95.2465%" y="197" width="0.8216%" height="15" fill="rgb(224,227,45)" fg:x="1623" fg:w="14"/><text x="95.4965%" y="207.50"></text></g><g><title>leef`regex::utf8::decode_utf8 (1 samples, 0.06%)</title><rect x="96.0094%" y="181" width="0.0587%" height="15" fill="rgb(229,198,43)" fg:x="1636" fg:w="1"/><text x="96.2594%" y="191.50"></text></g><g><title>leef`regex::re_unicode::Regex::captures (26 samples, 1.53%)</title><rect x="94.6009%" y="293" width="1.5258%" height="15" fill="rgb(206,209,35)" fg:x="1612" fg:w="26"/><text x="94.8509%" y="303.50"></text></g><g><title>leef`regex::re_unicode::Regex::captures_read_at (26 samples, 1.53%)</title><rect x="94.6009%" y="277" width="1.5258%" height="15" fill="rgb(245,195,53)" fg:x="1612" fg:w="26"/><text x="94.8509%" y="287.50"></text></g><g><title>leef`regex::exec::ExecNoSync::captures_nfa_type (1 samples, 0.06%)</title><rect x="96.0681%" y="261" width="0.0587%" height="15" fill="rgb(240,92,26)" fg:x="1637" fg:w="1"/><text x="96.3181%" y="271.50"></text></g><g><title>leef`regex::re_unicode::Regex::is_match_at (8 samples, 0.47%)</title><rect x="96.1268%" y="293" width="0.4695%" height="15" fill="rgb(207,40,23)" fg:x="1638" fg:w="8"/><text x="96.3768%" y="303.50"></text></g><g><title>leef`regex::dfa::Fsm::prefix_at (1 samples, 0.06%)</title><rect x="96.5376%" y="277" width="0.0587%" height="15" fill="rgb(223,111,35)" fg:x="1645" fg:w="1"/><text x="96.7876%" y="287.50"></text></g><g><title>leef`memchr::memmem::Finder::find (1 samples, 0.06%)</title><rect x="96.5376%" y="261" width="0.0587%" height="15" fill="rgb(229,147,28)" fg:x="1645" fg:w="1"/><text x="96.7876%" y="271.50"></text></g><g><title>leef`memchr::memmem::x86::avx::std::Forward::find_impl (1 samples, 0.06%)</title><rect x="96.5376%" y="245" width="0.0587%" height="15" fill="rgb(211,29,28)" fg:x="1645" fg:w="1"/><text x="96.7876%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="96.5962%" y="293" width="0.0587%" height="15" fill="rgb(228,72,33)" fg:x="1646" fg:w="1"/><text x="96.8462%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="96.5962%" y="277" width="0.0587%" height="15" fill="rgb(205,214,31)" fg:x="1646" fg:w="1"/><text x="96.8462%" y="287.50"></text></g><g><title>leef`leef::cn::processor_instance::Processor::post_process (44 samples, 2.58%)</title><rect x="94.1315%" y="309" width="2.5822%" height="15" fill="rgb(224,111,15)" fg:x="1604" fg:w="44"/><text x="94.3815%" y="319.50">le..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="96.6549%" y="293" width="0.0587%" height="15" fill="rgb(253,21,26)" fg:x="1647" fg:w="1"/><text x="96.9049%" y="303.50"></text></g><g><title>leef`std::process::Child::wait_with_output (1 samples, 0.06%)</title><rect x="96.7136%" y="85" width="0.0587%" height="15" fill="rgb(245,139,43)" fg:x="1648" fg:w="1"/><text x="96.9636%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.06%)</title><rect x="96.7136%" y="69" width="0.0587%" height="15" fill="rgb(252,170,7)" fg:x="1648" fg:w="1"/><text x="96.9636%" y="79.50"></text></g><g><title>leef`os_info::bitness::get (2 samples, 0.12%)</title><rect x="96.7136%" y="117" width="0.1174%" height="15" fill="rgb(231,118,14)" fg:x="1648" fg:w="2"/><text x="96.9636%" y="127.50"></text></g><g><title>leef`std::process::Command::output (2 samples, 0.12%)</title><rect x="96.7136%" y="101" width="0.1174%" height="15" fill="rgb(238,83,0)" fg:x="1648" fg:w="2"/><text x="96.9636%" y="111.50"></text></g><g><title>leef`std::sys::unix::process::process_inner::_&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (1 samples, 0.06%)</title><rect x="96.7723%" y="85" width="0.0587%" height="15" fill="rgb(221,39,39)" fg:x="1649" fg:w="1"/><text x="97.0223%" y="95.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.06%)</title><rect x="96.7723%" y="69" width="0.0587%" height="15" fill="rgb(222,119,46)" fg:x="1649" fg:w="1"/><text x="97.0223%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.06%)</title><rect x="96.7723%" y="53" width="0.0587%" height="15" fill="rgb(222,165,49)" fg:x="1649" fg:w="1"/><text x="97.0223%" y="63.50"></text></g><g><title>leef`mongodb::client::Client::with_options (3 samples, 0.18%)</title><rect x="96.7136%" y="309" width="0.1761%" height="15" fill="rgb(219,113,52)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="319.50"></text></g><g><title>leef`mongodb::sdam::topology::Topology::new (3 samples, 0.18%)</title><rect x="96.7136%" y="293" width="0.1761%" height="15" fill="rgb(214,7,15)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="303.50"></text></g><g><title>leef`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.18%)</title><rect x="96.7136%" y="277" width="0.1761%" height="15" fill="rgb(235,32,4)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="287.50"></text></g><g><title>leef`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.18%)</title><rect x="96.7136%" y="261" width="0.1761%" height="15" fill="rgb(238,90,54)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="271.50"></text></g><g><title>leef`mongodb::sdam::server::Server::new (3 samples, 0.18%)</title><rect x="96.7136%" y="245" width="0.1761%" height="15" fill="rgb(213,208,19)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="255.50"></text></g><g><title>leef`mongodb::cmap::ConnectionPool::new (3 samples, 0.18%)</title><rect x="96.7136%" y="229" width="0.1761%" height="15" fill="rgb(233,156,4)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="239.50"></text></g><g><title>leef`mongodb::cmap::worker::ConnectionPoolWorker::start (3 samples, 0.18%)</title><rect x="96.7136%" y="213" width="0.1761%" height="15" fill="rgb(207,194,5)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="223.50"></text></g><g><title>leef`mongodb::cmap::establish::handshake::Handshaker::new (3 samples, 0.18%)</title><rect x="96.7136%" y="197" width="0.1761%" height="15" fill="rgb(206,111,30)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="207.50"></text></g><g><title>leef`std::sync::once::Once::call_inner (3 samples, 0.18%)</title><rect x="96.7136%" y="181" width="0.1761%" height="15" fill="rgb(243,70,54)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="191.50"></text></g><g><title>leef`std::sync::once::Once::call_once::_{{closure}} (3 samples, 0.18%)</title><rect x="96.7136%" y="165" width="0.1761%" height="15" fill="rgb(242,28,8)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="175.50"></text></g><g><title>leef`os_info::get (3 samples, 0.18%)</title><rect x="96.7136%" y="149" width="0.1761%" height="15" fill="rgb(219,106,18)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="159.50"></text></g><g><title>leef`os_info::imp::current_platform (3 samples, 0.18%)</title><rect x="96.7136%" y="133" width="0.1761%" height="15" fill="rgb(244,222,10)" fg:x="1648" fg:w="3"/><text x="96.9636%" y="143.50"></text></g><g><title>leef`std::process::Command::output (1 samples, 0.06%)</title><rect x="96.8310%" y="117" width="0.0587%" height="15" fill="rgb(236,179,52)" fg:x="1650" fg:w="1"/><text x="97.0810%" y="127.50"></text></g><g><title>leef`std::sys::unix::process::process_inner::_&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (1 samples, 0.06%)</title><rect x="96.8310%" y="101" width="0.0587%" height="15" fill="rgb(213,23,39)" fg:x="1650" fg:w="1"/><text x="97.0810%" y="111.50"></text></g><g><title>leef`std::sys::unix::process::process_common::Command::setup_io (1 samples, 0.06%)</title><rect x="96.8310%" y="85" width="0.0587%" height="15" fill="rgb(238,48,10)" fg:x="1650" fg:w="1"/><text x="97.0810%" y="95.50"></text></g><g><title>leef`std::sys::unix::process::process_common::Stdio::to_child_stdio (1 samples, 0.06%)</title><rect x="96.8310%" y="69" width="0.0587%" height="15" fill="rgb(251,196,23)" fg:x="1650" fg:w="1"/><text x="97.0810%" y="79.50"></text></g><g><title>leef`std::sys::unix::fs::File::open_c (1 samples, 0.06%)</title><rect x="96.8310%" y="53" width="0.0587%" height="15" fill="rgb(250,152,24)" fg:x="1650" fg:w="1"/><text x="97.0810%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.06%)</title><rect x="96.8310%" y="37" width="0.0587%" height="15" fill="rgb(209,150,17)" fg:x="1650" fg:w="1"/><text x="97.0810%" y="47.50"></text></g><g><title>leef`memchr::memmem::Searcher::find_tw (3 samples, 0.18%)</title><rect x="97.7113%" y="261" width="0.1761%" height="15" fill="rgb(234,202,34)" fg:x="1665" fg:w="3"/><text x="97.9613%" y="271.50"></text></g><g><title>leef`memchr::memmem::prefilter::x86::avx::find (1 samples, 0.06%)</title><rect x="97.8286%" y="245" width="0.0587%" height="15" fill="rgb(253,148,53)" fg:x="1667" fg:w="1"/><text x="98.0786%" y="255.50"></text></g><g><title>leef`regex::re_unicode::Regex::is_match_at (18 samples, 1.06%)</title><rect x="96.8897%" y="309" width="1.0563%" height="15" fill="rgb(218,129,16)" fg:x="1651" fg:w="18"/><text x="97.1397%" y="319.50"></text></g><g><title>leef`regex::dfa::Fsm::prefix_at (5 samples, 0.29%)</title><rect x="97.6526%" y="293" width="0.2934%" height="15" fill="rgb(216,85,19)" fg:x="1664" fg:w="5"/><text x="97.9026%" y="303.50"></text></g><g><title>leef`memchr::memmem::Finder::find (4 samples, 0.23%)</title><rect x="97.7113%" y="277" width="0.2347%" height="15" fill="rgb(235,228,7)" fg:x="1665" fg:w="4"/><text x="97.9613%" y="287.50"></text></g><g><title>leef`memchr::memmem::x86::avx::std::Forward::find_impl (1 samples, 0.06%)</title><rect x="97.8873%" y="261" width="0.0587%" height="15" fill="rgb(245,175,0)" fg:x="1668" fg:w="1"/><text x="98.1373%" y="271.50"></text></g><g><title>leef`regex::re_unicode::Regex::new (1 samples, 0.06%)</title><rect x="97.9460%" y="309" width="0.0587%" height="15" fill="rgb(208,168,36)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="319.50"></text></g><g><title>leef`regex::exec::ExecBuilder::build (1 samples, 0.06%)</title><rect x="97.9460%" y="293" width="0.0587%" height="15" fill="rgb(246,171,24)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="303.50"></text></g><g><title>leef`regex::compile::Compiler::compile (1 samples, 0.06%)</title><rect x="97.9460%" y="277" width="0.0587%" height="15" fill="rgb(215,142,24)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="287.50"></text></g><g><title>leef`regex::compile::Compiler::c (1 samples, 0.06%)</title><rect x="97.9460%" y="261" width="0.0587%" height="15" fill="rgb(250,187,7)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="271.50"></text></g><g><title>leef`regex::compile::Compiler::c (1 samples, 0.06%)</title><rect x="97.9460%" y="245" width="0.0587%" height="15" fill="rgb(228,66,33)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="255.50"></text></g><g><title>leef`regex::compile::Compiler::c (1 samples, 0.06%)</title><rect x="97.9460%" y="229" width="0.0587%" height="15" fill="rgb(234,215,21)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="239.50"></text></g><g><title>leef`regex::compile::Compiler::c_class (1 samples, 0.06%)</title><rect x="97.9460%" y="213" width="0.0587%" height="15" fill="rgb(222,191,20)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="223.50"></text></g><g><title>leef`regex::compile::CompileClass::c_utf8_seq (1 samples, 0.06%)</title><rect x="97.9460%" y="197" width="0.0587%" height="15" fill="rgb(245,79,54)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="207.50"></text></g><g><title>leef`regex::compile::SuffixCache::get (1 samples, 0.06%)</title><rect x="97.9460%" y="181" width="0.0587%" height="15" fill="rgb(240,10,37)" fg:x="1669" fg:w="1"/><text x="98.1960%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.06%)</title><rect x="98.0047%" y="309" width="0.0587%" height="15" fill="rgb(214,192,32)" fg:x="1670" fg:w="1"/><text x="98.2547%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="98.0634%" y="309" width="0.0587%" height="15" fill="rgb(209,36,54)" fg:x="1671" fg:w="1"/><text x="98.3134%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.29%)</title><rect x="98.4155%" y="293" width="0.2934%" height="15" fill="rgb(220,10,11)" fg:x="1677" fg:w="5"/><text x="98.6655%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.65%)</title><rect x="98.1221%" y="309" width="0.6455%" height="15" fill="rgb(221,106,17)" fg:x="1672" fg:w="11"/><text x="98.3721%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.06%)</title><rect x="98.7089%" y="293" width="0.0587%" height="15" fill="rgb(251,142,44)" fg:x="1682" fg:w="1"/><text x="98.9589%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.06%)</title><rect x="98.7089%" y="277" width="0.0587%" height="15" fill="rgb(238,13,15)" fg:x="1682" fg:w="1"/><text x="98.9589%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.06%)</title><rect x="98.8263%" y="293" width="0.0587%" height="15" fill="rgb(208,107,27)" fg:x="1684" fg:w="1"/><text x="99.0763%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.18%)</title><rect x="98.7676%" y="309" width="0.1761%" height="15" fill="rgb(205,136,37)" fg:x="1683" fg:w="3"/><text x="99.0176%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.06%)</title><rect x="98.8850%" y="293" width="0.0587%" height="15" fill="rgb(250,205,27)" fg:x="1685" fg:w="1"/><text x="99.1350%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.12%)</title><rect x="98.9437%" y="309" width="0.1174%" height="15" fill="rgb(210,80,43)" fg:x="1686" fg:w="2"/><text x="99.1937%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.59%)</title><rect x="99.0610%" y="309" width="0.5869%" height="15" fill="rgb(247,160,36)" fg:x="1688" fg:w="10"/><text x="99.3110%" y="319.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (1 samples, 0.06%)</title><rect x="99.6479%" y="309" width="0.0587%" height="15" fill="rgb(234,13,49)" fg:x="1698" fg:w="1"/><text x="99.8979%" y="319.50"></text></g><g><title>leef`leef::main::_{{closure}} (1,700 samples, 99.77%)</title><rect x="0.0000%" y="325" width="99.7653%" height="15" fill="rgb(234,122,0)" fg:x="0" fg:w="1700"/><text x="0.2500%" y="335.50">leef`leef::main::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="99.7066%" y="309" width="0.0587%" height="15" fill="rgb(207,146,38)" fg:x="1699" fg:w="1"/><text x="99.9566%" y="319.50"></text></g><g><title>leef`main (1,701 samples, 99.82%)</title><rect x="0.0000%" y="469" width="99.8239%" height="15" fill="rgb(207,177,25)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="479.50">leef`main</text></g><g><title>leef`std::rt::lang_start_internal (1,701 samples, 99.82%)</title><rect x="0.0000%" y="453" width="99.8239%" height="15" fill="rgb(211,178,42)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="463.50">leef`std::rt::lang_start_internal</text></g><g><title>leef`std::rt::lang_start::_{{closure}} (1,701 samples, 99.82%)</title><rect x="0.0000%" y="437" width="99.8239%" height="15" fill="rgb(230,69,54)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="447.50">leef`std::rt::lang_start::_{{closure}}</text></g><g><title>leef`std::sys_common::backtrace::__rust_begin_short_backtrace (1,701 samples, 99.82%)</title><rect x="0.0000%" y="421" width="99.8239%" height="15" fill="rgb(214,135,41)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="431.50">leef`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>leef`leef::main (1,701 samples, 99.82%)</title><rect x="0.0000%" y="405" width="99.8239%" height="15" fill="rgb(237,67,25)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="415.50">leef`leef::main</text></g><g><title>leef`tokio::runtime::Runtime::block_on (1,701 samples, 99.82%)</title><rect x="0.0000%" y="389" width="99.8239%" height="15" fill="rgb(222,189,50)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="399.50">leef`tokio::runtime::Runtime::block_on</text></g><g><title>leef`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1,701 samples, 99.82%)</title><rect x="0.0000%" y="373" width="99.8239%" height="15" fill="rgb(245,148,34)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="383.50">leef`tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>leef`tokio::park::thread::CachedParkThread::block_on (1,701 samples, 99.82%)</title><rect x="0.0000%" y="357" width="99.8239%" height="15" fill="rgb(222,29,6)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="367.50">leef`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>leef`std::thread::local::LocalKey&lt;T&gt;::with (1,701 samples, 99.82%)</title><rect x="0.0000%" y="341" width="99.8239%" height="15" fill="rgb(221,189,43)" fg:x="0" fg:w="1701"/><text x="0.2500%" y="351.50">leef`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="99.7653%" y="325" width="0.0587%" height="15" fill="rgb(207,36,27)" fg:x="1700" fg:w="1"/><text x="100.0153%" y="335.50"></text></g><g><title>dyld`start (1,702 samples, 99.88%)</title><rect x="0.0000%" y="485" width="99.8826%" height="15" fill="rgb(217,90,24)" fg:x="0" fg:w="1702"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (1 samples, 0.06%)</title><rect x="99.8239%" y="469" width="0.0587%" height="15" fill="rgb(224,66,35)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="479.50"></text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.06%)</title><rect x="99.8239%" y="453" width="0.0587%" height="15" fill="rgb(221,13,50)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="463.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (1 samples, 0.06%)</title><rect x="99.8239%" y="437" width="0.0587%" height="15" fill="rgb(236,68,49)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="447.50"></text></g><g><title>libc++.1.dylib`std::__1::DoIOSInit::~DoIOSInit (1 samples, 0.06%)</title><rect x="99.8239%" y="421" width="0.0587%" height="15" fill="rgb(229,146,28)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_ostream&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt;::flush (1 samples, 0.06%)</title><rect x="99.8239%" y="405" width="0.0587%" height="15" fill="rgb(225,31,38)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::__stdoutbuf&lt;wchar_t&gt;::sync (1 samples, 0.06%)</title><rect x="99.8239%" y="389" width="0.0587%" height="15" fill="rgb(250,208,3)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift (1 samples, 0.06%)</title><rect x="99.8239%" y="373" width="0.0587%" height="15" fill="rgb(246,54,23)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="383.50"></text></g><g><title>libsystem_c.dylib`wcrtomb_l (1 samples, 0.06%)</title><rect x="99.8239%" y="357" width="0.0587%" height="15" fill="rgb(243,76,11)" fg:x="1701" fg:w="1"/><text x="100.0739%" y="367.50"></text></g><g><title>leef`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.06%)</title><rect x="99.8826%" y="373" width="0.0587%" height="15" fill="rgb(245,21,50)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="383.50"></text></g><g><title>leef`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="99.8826%" y="357" width="0.0587%" height="15" fill="rgb(228,9,43)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="367.50"></text></g><g><title>leef`tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 0.06%)</title><rect x="99.8826%" y="341" width="0.0587%" height="15" fill="rgb(208,100,47)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="351.50"></text></g><g><title>leef`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.06%)</title><rect x="99.8826%" y="325" width="0.0587%" height="15" fill="rgb(232,26,8)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="335.50"></text></g><g><title>leef`tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 0.06%)</title><rect x="99.8826%" y="309" width="0.0587%" height="15" fill="rgb(216,166,38)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="319.50"></text></g><g><title>leef`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 0.06%)</title><rect x="99.8826%" y="293" width="0.0587%" height="15" fill="rgb(251,202,51)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="303.50"></text></g><g><title>leef`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.06%)</title><rect x="99.8826%" y="277" width="0.0587%" height="15" fill="rgb(254,216,34)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="287.50"></text></g><g><title>leef`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.06%)</title><rect x="99.8826%" y="261" width="0.0587%" height="15" fill="rgb(251,32,27)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="271.50"></text></g><g><title>leef`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.06%)</title><rect x="99.8826%" y="245" width="0.0587%" height="15" fill="rgb(208,127,28)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="255.50"></text></g><g><title>leef`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="99.8826%" y="229" width="0.0587%" height="15" fill="rgb(224,137,22)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="239.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;mongodb::sdam::monitor::Monitor&gt; (1 samples, 0.06%)</title><rect x="99.8826%" y="213" width="0.0587%" height="15" fill="rgb(254,70,32)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="223.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;mongodb::cmap::conn::Connection&gt; (1 samples, 0.06%)</title><rect x="99.8826%" y="197" width="0.0587%" height="15" fill="rgb(229,75,37)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="207.50"></text></g><g><title>leef`core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (1 samples, 0.06%)</title><rect x="99.8826%" y="181" width="0.0587%" height="15" fill="rgb(252,64,23)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (1 samples, 0.06%)</title><rect x="99.8826%" y="165" width="0.0587%" height="15" fill="rgb(232,162,48)" fg:x="1702" fg:w="1"/><text x="100.1326%" y="175.50"></text></g><g><title>all (1,704 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(246,160,12)" fg:x="0" fg:w="1704"/><text x="0.2500%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2 samples, 0.12%)</title><rect x="99.8826%" y="485" width="0.1174%" height="15" fill="rgb(247,166,0)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (2 samples, 0.12%)</title><rect x="99.8826%" y="469" width="0.1174%" height="15" fill="rgb(249,219,21)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="479.50"></text></g><g><title>leef`std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.12%)</title><rect x="99.8826%" y="453" width="0.1174%" height="15" fill="rgb(205,209,3)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="463.50"></text></g><g><title>leef`core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.12%)</title><rect x="99.8826%" y="437" width="0.1174%" height="15" fill="rgb(243,44,1)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="447.50"></text></g><g><title>leef`std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.12%)</title><rect x="99.8826%" y="421" width="0.1174%" height="15" fill="rgb(206,159,16)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="431.50"></text></g><g><title>leef`tokio::runtime::blocking::pool::Inner::run (2 samples, 0.12%)</title><rect x="99.8826%" y="405" width="0.1174%" height="15" fill="rgb(244,77,30)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="415.50"></text></g><g><title>leef`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.12%)</title><rect x="99.8826%" y="389" width="0.1174%" height="15" fill="rgb(218,69,12)" fg:x="1702" fg:w="2"/><text x="100.1326%" y="399.50"></text></g><g><title>leef`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.06%)</title><rect x="99.9413%" y="373" width="0.0587%" height="15" fill="rgb(212,87,7)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="383.50"></text></g><g><title>leef`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="99.9413%" y="357" width="0.0587%" height="15" fill="rgb(245,114,25)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="367.50"></text></g><g><title>leef`&lt;alloc::string::String as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.06%)</title><rect x="99.9413%" y="341" width="0.0587%" height="15" fill="rgb(210,61,42)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="351.50"></text></g><g><title>leef`&lt;str as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.06%)</title><rect x="99.9413%" y="325" width="0.0587%" height="15" fill="rgb(211,52,33)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="335.50"></text></g><g><title>leef`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (1 samples, 0.06%)</title><rect x="99.9413%" y="309" width="0.0587%" height="15" fill="rgb(234,58,33)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="319.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (1 samples, 0.06%)</title><rect x="99.9413%" y="293" width="0.0587%" height="15" fill="rgb(220,115,36)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="303.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (1 samples, 0.06%)</title><rect x="99.9413%" y="277" width="0.0587%" height="15" fill="rgb(243,153,54)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="287.50"></text></g><g><title>libsystem_info.dylib`_gai_sort_list (1 samples, 0.06%)</title><rect x="99.9413%" y="261" width="0.0587%" height="15" fill="rgb(251,47,18)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="271.50"></text></g><g><title>libsystem_c.dylib`_qsort (1 samples, 0.06%)</title><rect x="99.9413%" y="245" width="0.0587%" height="15" fill="rgb(242,102,42)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="255.50"></text></g><g><title>libsystem_c.dylib`_isort (1 samples, 0.06%)</title><rect x="99.9413%" y="229" width="0.0587%" height="15" fill="rgb(234,31,38)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="239.50"></text></g><g><title>libsystem_info.dylib`si_destination_compare (1 samples, 0.06%)</title><rect x="99.9413%" y="213" width="0.0587%" height="15" fill="rgb(221,117,51)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (1 samples, 0.06%)</title><rect x="99.9413%" y="197" width="0.0587%" height="15" fill="rgb(212,20,18)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (1 samples, 0.06%)</title><rect x="99.9413%" y="181" width="0.0587%" height="15" fill="rgb(245,133,36)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (1 samples, 0.06%)</title><rect x="99.9413%" y="165" width="0.0587%" height="15" fill="rgb(212,6,19)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="175.50"></text></g><g><title>libsystem_info.dylib`si_destination_compare_init_once (1 samples, 0.06%)</title><rect x="99.9413%" y="149" width="0.0587%" height="15" fill="rgb(218,1,36)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="159.50"></text></g><g><title>libsystem_trace.dylib`os_log_create (1 samples, 0.06%)</title><rect x="99.9413%" y="133" width="0.0587%" height="15" fill="rgb(246,84,54)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="143.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.06%)</title><rect x="99.9413%" y="117" width="0.0587%" height="15" fill="rgb(242,110,6)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="127.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.06%)</title><rect x="99.9413%" y="101" width="0.0587%" height="15" fill="rgb(214,47,5)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="111.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_init_slow (1 samples, 0.06%)</title><rect x="99.9413%" y="85" width="0.0587%" height="15" fill="rgb(218,159,25)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (1 samples, 0.06%)</title><rect x="99.9413%" y="69" width="0.0587%" height="15" fill="rgb(215,211,28)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="79.50"></text></g></svg></svg>